# SCJ-Checker, v.0.1
#          
# readme author: Ales Plsek, aplsek@purdue.edu
# date: 11-08-2009
#  
# Project Homepage: http://www.cs.purdue.edu/homes/plsek/soft/scj/checker/checker.html      
# Submit bug reports, comments and feedback: http://www.cs.purdue.edu/homes/plsek/soft/scj/authors/authors.html

1. Installation
----------------------------------------

This section describes how to install the binary release of the SCJ-Checker. 

Requirement: You must have JDK 6 or later installed. You can get JDK 6 from Sun or elsewhere.

1.2.1  Unix/Linux/MacOS installation
-----------------------------------------

These instructions assume that you use the bash or sh shell. If you use a different shell, you may need to slightly adjust the commands.

1. From JSR302 CVS:
--------------------------
     1. Update your JSR302 directory
     2. You can find the checker distribution is in /check directory
 
2. Distribution Download
--------------------------
Download the latest Checker Framework distribution and unzip it. You can put it anywhere you like; a standard place is in a new sub-directory named scjChecker in your JSR-302 directory.

        # wget http://.../scjChecker.tar.bz2
        curl -O  http://.../scjChecker.tar.bz2
        tar yxf scjChecker.tar.bz2
        chmod +x scjChecker/check.sh
     
     
     
2. Launching the SCJ-Checker
----------------------------------------

0. Testing your distribution
--------------------------

Launch the ./testCheck.sh script. This script will check the source files from the /tests directory and will verify the output. You should see:

$./testCheck. sh
---------------------------------------------------
@SCJAllowed Test:
tests/scjAllowed/TestSCJAllowed101.java testcase OK.
tests/scjAllowed/TestSCJAllowed102.java testcase OK.
tests/scjAllowed/TestSCJAllowed103.java testcase OK.
tests/scjAllowed/TestSCJMembers201.java testcase OK.
tests/scjAllowed/TestSCJMembers202.java testcase OK.
tests/scjAllowed/TestSuppress301.java testcase OK.
tests/scjAllowed/TestSuppress302.java testcase OK.
tests/scjAllowed/TestOverride401.java testcase OK.
tests/scjAllowed/TestOverride402.java testcase OK.
tests/scjAllowed/TestGuard501.java testcase OK.
tests/scjAllowed/TestNestedClass601.java testcase OK.
tests/javax/safetycritical/FakeMemory.java testcase OK.
tests/javax/safetycritical/SCJFakeNestedClasses.java testcase OK.
tests/javax/safetycritical/FakeSCJMembers.java testcase OK.
tests/javax/safetycritical/FakeSCJ.java testcase OK.
tests/javax/safetycritical/ManagedEventHandler.java testcase OK.
tests/javax/safetycritical/Safelet.java testcase OK.
*** Test Successfull No errors were found ***

1. Running the Checker
-----------------------
Run the check.sh script to launch the checking, you must provide a source directory with the source-files to be checked.
   
Example:
  ./check.sh ../scj/specsrc/
where:
  ../scj/specsrc/ - directory where to find source-files to check
  
2. Understanding the output
-----------------------
The checker should not print anything. Any output is sign of a badly annotated program. Currently there are about 80+ errors in the spec and RI. We should discuss who will fix those errors. Basically, we need more annotationsin the SPEC/RI dirs.        
        
2.1   Compilation
-----------------------
The checker is in fact a javac compiler that will be shipped with Java 7. Before any @SCJ-Annotation errors can be provided, the compiler will compile the whole source code and report any compilations errors that will be found. 

Note: No @SCJ-Annotation checking is done if there are any compilation errors in the source code. 
        
        
2.2 SCJ Checking
-----------------------
See the oSCJ home page for explanations of different SCJ-Annotation errors.
Note: SCJ-Annotation errors are reported as warnings (-Awarns) to detect all the annotation errors. Without the  -Awarns param, only 1 annotation-error at a time is reported. This behavior is in compliance with the Java7 Checker Framework.             
        
        
3. Checking the Spec and RI
-----------------------
  for the spec:
     ./specCheck.sh 
  for RI:
   ./riCheck.sh        
4. @SuppressAnnotation
-------------------------
The annotation @SupressSCJ tells the checker to ignore errorsoccurring while checking some of the RI methods. This is an internal annotationfor use by infrastructure implementors when they know they are breaking the rules of SCJ. It should not occur in user code. [Should be checked.]

You can use @SuppressSCJ to suppress checking over the class/method/element annotated with it.

We have some default classes that are treated as SCJAllowed even if there arenot annotated (Object, Error, Throwable, Exception along with their constructorsand methods).
        