# GDB macros for debugging Ovm virtual machines.  J2c allows
# source-level debugging of Java code, but with mangled names.
# @ABS_TOP_SRCDIR@/doc/texdoc/debug/debug_ovm.tex
# provides a more detailed explanation of how J2c transforms class,
# method, and variable names, along with several tips on debugging
# j2c-compiled code.

directory ${native-dir}/${engine}

# Tell gdb where to find source code for the OVM itself.  Note: on
# Linux systems with gdb versions 3.1 and higher, debug information
# comes out funny.
directory ${ovm-srcdir}/src

# Usually, we want gdb to display source code for the user-level
# runtime libraries.  To debug the kernel runtime library, uncomment
# the next line, and comment out the next forur lines
# executive domain runtime library
# directory ${ovm-srcdir}/src/syslib/s3

# user domain runtime library
directory ${ovm-srcdir}/gnu-classpath
directory ${ovm-srcdir}/src/syslib/user/ovm_classpath
directory ${ovm-srcdir}/src/syslib/user/ovm_platform
directory ${ovm-srcdir}/src/syslib/user

# user domain regression tests
directory ${ovm-srcdir}/src/syslib/user/ovm_test
directory ${ovm-srcdir}/src/apps

define pclass
print (char *) ($arg0)->HEADER::blueprint->ovm_dbg_1string->values
end
document pclass
prints the concrete type of an object
end

define pstring_user
  set $arr = $arg0->ovm_value->values
  set $len = $arg0->ovm_count
  set $start = $arg0->ovm_offset
  set $i = 0
  while ($i < $len)
    printf "%c", $arr[$start + $i]
    set $i = $i + 1
  end
  printf "\n"
end
  
define pstatic
print *($arg0_static *) &static_$arg0
end
document pstatic
When given a fully qualified class name (where dots
are placed by underscores), this macro prints the contents of the
class's static variables.
end

define pstring_safe
call print_string($arg0->ovm_data->values + $arg0->ovm_offset, $arg0->ovm_count)
end
document pstring_safe
Print a string by calling the native helper method.
end

define pstring
print (char *) $arg0->ovm_data->values + $arg0->ovm_offset
end
document pstring
Print a string by casting the underlying byte array to char *
end
