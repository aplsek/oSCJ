# GDB macros for debugging Ovm virtual machines.
directory ${native-dir}/${engine}

#define jitWhere
#  # I know there is a way to define local variables in gdb commands, but
#  # I can't remember how...
#  # set nc = ((struct s3_services_simplejit_SimpleJITCode **) $ebp)[2]
#  print (char *) ((((struct s3_services_simplejit_SimpleJITCode **) $ebp)[2]) \
#		  ->methodname_->values)
#end
#document jitWhere
#Print the current method's name
#end

define pclass
print (char *) ((struct HEADER *) ($arg0))->_blueprint_->dbg_string->values
end
document pclass
print an object's blueprint string
end

define pmethod
print (char *) ((struct s3_services_simplejit_SimpleJITCode*)$arg0)->methodname_->values
end
document pmethod
print an native method's name
end

define pcode
	set $pcode_codelen = ((struct s3_services_simplejit_SimpleJITCode*)$arg0)->bytes->length
	printf "codelen = %d\n", $pcode_codelen
	x/65535i ((struct s3_services_simplejit_SimpleJITCode*)$arg0)->_parent_._parent_.foreignEntry
end
document pcode
print the native code of a native method
end

# Print locals ($arg0 = frame #)
define jframe
print locals and stack
end
define jframe
	set $jframe_fp = (int)$ebp
	set $jframe_sp = (int)$esp
	set $jframe_frame_index = 0
	while ($jframe_frame_index != (int)$arg0)
		set $jframe_sp = $jframe_fp + 12
		set $jframe_fp = *(int*)$jframe_fp
		set $jframe_frame_index = $jframe_frame_index + 1
	end
	set $jframe_nc = ((struct s3_services_simplejit_SimpleJITCode **)$jframe_fp)[2]
	set $jframe_methodname = (char *) ($jframe_nc->methodname_->values)
	set $jframe_maxstack = $jframe_nc->maxStack_
	set $jframe_maxlocals = $jframe_nc->maxLocals_
	set $jframe_arglength = $jframe_nc->argLen_

	printf "frame[%d] : %s\n", $jframe_frame_index, $jframe_methodname
	set $jframe_i = 0
	while ($jframe_i < $jframe_maxlocals)
		if ($jframe_i < $jframe_arglength)
			set $jframe_offset = 4 * (3 + $jframe_i)
		else
			set $jframe_offset = - 4 * (6 + $jframe_i - $jframe_arglength - ($jframe_i - $jframe_arglength))
		end
		printf "\tlocal[%d] = %d(0x%x)\n", $jframe_i, *(int*)((int)$jframe_fp + $jframe_offset), *(int*)((int)$jframe_fp + $jframe_offset)
		set $jframe_i = $jframe_i + 1
	end
	set $jframe_i = 0
	while (($jframe_fp - 4 * (6 + $jframe_maxlocals - $jframe_arglength)) != $jframe_sp)
		printf "\tstack[%d] = %d(0x%x)\n", $jframe_i, *(int*)($jframe_sp), *(int*)($jframe_sp)
		set $jframe_i = $jframe_i + 1
		set $jframe_sp = $jframe_sp + 4
	end

end

# Print JIT stack trace inside gdb - HY
define jwhere
	set $jwhere_fp = (int)$ebp
	set $jwhere_pc = (int)$eip
	set $jwhere_frame_index = 0
	while 1
		set $jwhere_nc = ((struct s3_services_simplejit_SimpleJITCode **)$jwhere_fp)[2]
		set $jwhere_methodname = (char *) ($jwhere_nc->methodname_->values)

		set $jwhere_methodaddress = $jwhere_nc->_parent_._parent_.foreignEntry

		set $jwhere_lnt = $jwhere_nc->lnt

		set $jwhere_bytecodePC2NativePC = $jwhere_nc->bytecodePC2NativePC
		set $jwhere_sourceFileName = (char*)($jwhere_nc->sourceFileName->values)

		set $jwhere_relative_pc = $jwhere_pc - (int)$jwhere_methodaddress

# 		if ((int)$jwhere_lnt != 0)
# 			set $jwhere_tableStartPC = $jwhere_lnt->tableStartPC_
# 			set $jwhere_tableLineNumber = $jwhere_lnt->tableLineNumber_
# 			set $jwhere_line_number_index = 0
# 			set $jwhere_i = $jwhere_tableStartPC->length - 1
# 			set $jwhere_search_done = 0
# 			while ($jwhere_i >= 0 && $jwhere_search_done == 0)
# 				if ($jwhere_relative_pc > $jwhere_tableStartPC->values[$jwhere_i])
# 					set $jwhere_line_number_index = $jwhere_i
# 					set $jwhere_search_done = 1
# 				end
# 				set $jwhere_i = $jwhere_i - 1
# 			end

# 			set $jwhere_bytecode_pc = 0
# 			set $jwhere_i = (int)$jwhere_bytecodePC2NativePC->length - 1
# 			set $jwhere_search_done = 0
# 			while ($jwhere_i >= 0 && $jwhere_search_done == 0)
# 				set $jwhere_bpc = $jwhere_bytecodePC2NativePC->values[$jwhere_i]
# 				if ($jwhere_bpc != 0 && $jwhere_relative_pc > $jwhere_bpc)
# 					set $jwhere_bytecode_pc = $jwhere_i
# 					set $jwhere_search_done = 1
# 				end
# 				set $jwhere_i = $jwhere_i - 1
# 			end
# 			printf "[%d] = %s : (%s: line %d, bpc %d, pc %p)\n", $jwhere_frame_index, $jwhere_methodname, $jwhere_sourceFileName, (int)$jwhere_tableLineNumber->values[$jwhere_line_number_index], $jwhere_bytecode_pc, $jwhere_pc
#		else
			set $jwhere_bytecode_pc = 0
			set $jwhere_i = (int)$jwhere_bytecodePC2NativePC->length - 1
			set $jwhere_search_done = 0
			while ($jwhere_i >= 0 && $jwhere_search_done == 0)
				set $jwhere_bpc = $jwhere_bytecodePC2NativePC->values[$jwhere_i]
				if ($jwhere_bpc != 0 && $jwhere_relative_pc > $jwhere_bpc)
					set $jwhere_bytecode_pc = $jwhere_i
					set $jwhere_search_done = 1
				end
				set $jwhere_i = $jwhere_i - 1
			end
			printf "[%d] = %s : (%s: bpc %d)\n", $jwhere_frame_index, $jwhere_methodname, $jwhere_sourceFileName, $jwhere_bytecode_pc
#		end



		set $jwhere_pc = *((int*)$jwhere_fp + 1)
		set $jwhere_fp = *(int*)$jwhere_fp
		set $jwhere_frame_index = $jwhere_frame_index + 1

	end
end

document jwhere
print the JIT stack trace
end
