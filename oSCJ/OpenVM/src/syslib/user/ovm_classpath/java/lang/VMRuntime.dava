/* VMRuntime.java -- VM interface to Runtime
   Copyright (C) 2003 Free Software Foundation

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package java.lang;

import java.io.File;
import java.util.Properties;

/**
 * VMRuntime represents the interface to the Virtual Machine.
 *
 * <h3>OVM Notes</h3>
 * <p>The bootstrap initialization sequence is quite fragile. 
 * Classpath requires
 * that System be initialized first, which in turn initialises Runtime - which
 * means that nothing used in the initialisation of Runtime or any dependent
 * classes can require that System be initialized - which primarily means don't
 * try and access System properties. This means no use of Strings in a way
 * that requires the EncodingManager to be used, and no throwing of exceptions
 * at all. If an exception does occur then there will be a secondary exception
 * that causes the OVM to abort.
 *
 * <h4>To-Do (Maybe)</h4>
 * <p>Implement library/file loading
 * <p>Finish filling in system properties properly
 * <p>Process execution
 *
 * @author  David Holmes
 * @author Jeroen Frijters
 */
final class VMRuntime
{
    /**
     * No instance is ever created.
     */
    private VMRuntime() 
    {
    }

    /**
     * Returns the number of available processors currently available to the
     * virtual machine. This number may change over time; so a multi-processor
     * program want to poll this to determine maximal resource usage.
     *
     * @return the number of processors available, at least 1
     */
    static int availableProcessors() {
         return LibraryImports.availableProcessors();
    }

    /**
     * Find out how much memory is still free for allocating Objects on the heap.
     *
     * @return the number of bytes of free memory for more Objects
     */
    static long freeMemory() {
	return LibraryImports.freeMemory();
    }

    /**
     * Find out how much memory total is available on the heap for allocating
     * Objects.
     *
     * @return the total number of bytes of memory for Objects
     */
    static long totalMemory() {
        return LibraryImports.totalMemory();
    }

    /**
     * Returns the maximum amount of memory the virtual machine can attempt to
     * use. This may be <code>Long.MAX_VALUE</code> if there is no inherent
     * limit (or if you really do have a 8 exabyte memory!).
     *
     * @return the maximum number of bytes the virtual machine will attempt
     *         to allocate
     */
    static long maxMemory() {
        return LibraryImports.maxMemory();
    }

    /**
     * Run the garbage collector. This method is more of a suggestion than
     * anything. All this method guarantees is that the garbage collector will
     * have "done its best" by the time it returns. Notice that garbage
     * collection takes place even without calling this method.
     */
    static void gc() {
         LibraryImports.gc();
    }

    /**
     * Run finalization on all Objects that are waiting to be finalized. Again,
     * a suggestion, though a stronger one than {@link #gc()}. This calls the
     * <code>finalize</code> method of all objects waiting to be collected.
     *
     * @see #finalize()
     */
    static void runFinalization() {
 	LibraryImports.runFinalization();
    }

    /**
     * Run finalization on all finalizable Objects (even live ones). This
     * should only be called immediately prior to VM termination.
     *
     * @see #finalize()
     */
    static void runFinalizationForExit() {
	// not supported!
    }

    /**
     * Tell the VM to trace every bytecode instruction that executes (print out
     * a trace of it).  No guarantees are made as to where it will be printed,
     * and the VM is allowed to ignore this request.
     *
     * @param on whether to turn instruction tracing on
     */
    static void traceInstructions(boolean on) {
	// not supported
    }

    /**
     * Tell the VM to trace every method call that executes (print out a trace
     * of it).  No guarantees are made as to where it will be printed, and the
     * VM is allowed to ignore this request.
     *
     * @param on whether to turn method tracing on
     */
    static void traceMethodCalls(boolean on) {
	// not supported
    }

    /**
     * Native method that actually sets the finalizer setting.
     *
     * @param value whether to run finalizers on exit
     */
    static void runFinalizersOnExit(boolean value) {
 	JavaVirtualMachine.getInstance().runFinalizersOnExit(value);
     }

    /**
     * Native method that actually shuts down the virtual machine.
     *
     * @param status the status to end the process with
     */
    static void exit(int status) {
	System.out.println("Runtime.exit() was invoked");
//        new Error().printStackTrace(System.out);
	JavaVirtualMachine.getInstance().exit(status);
   }

    /**
     * Load a file. If it has already been loaded, do nothing. The name has
     * already been mapped to a true filename.
     *
     * @param filename the file to load
     * @return 0 on failure, nonzero on success
     */
    static int nativeLoad(String filename) {
 	// ##### TO DO - actually load the file
	return 1; // FIXME!
    }

    /**
     * Map a system-independent "short name" to the full file name, and append
     * it to the path.
     * XXX This method is being replaced by System.mapLibraryName.
     *
     * @param pathname the path
     * @param libname the short version of the library name
     * @return the full filename
     */
    static String nativeGetLibname(String pathname, String libname) {
         return pathname + File.separator + libname;
    }

    /**
     * Execute a process. The command line has already been tokenized, and
     * the environment should contain name=value mappings. If directory is null,
     * use the current working directory; otherwise start the process in that
     * directory.  If env is null, then the new process should inherit
     * the environment of this process.
     *
     * @param cmd the non-null command tokens
     * @param env the environment setup
     * @param dir the directory to use, may be null
     * @return the newly created process
     * @throws NullPointerException if cmd or env have null elements
     */
    static Process exec(String[] cmd, String[] env, File dir) {
       throw new NoSuchMethodError("exec not supported");
    }
  
    /**
     * Get the system properties. This is done here, instead of in System,
     * because of the bootstrap sequence. Note that the native code should
     * not try to use the Java I/O classes yet, as they rely on the properties
     * already existing. The only safe method to use to insert these default
     * system properties is {@link Properties#setProperty(String, String)}.
     *
     * <p>These properties MUST include:
     * <dl>
     * <dt>java.version         <dd>Java version number
     * <dt>java.vendor          <dd>Java vendor specific string
     * <dt>java.vendor.url      <dd>Java vendor URL
     * <dt>java.home            <dd>Java installation directory
     * <dt>java.vm.specification.version <dd>VM Spec version
     * <dt>java.vm.specification.vendor  <dd>VM Spec vendor
     * <dt>java.vm.specification.name    <dd>VM Spec name
     * <dt>java.vm.version      <dd>VM implementation version
     * <dt>java.vm.vendor       <dd>VM implementation vendor
     * <dt>java.vm.name         <dd>VM implementation name
     * <dt>java.specification.version    <dd>Java Runtime Environment version
     * <dt>java.specification.vendor     <dd>Java Runtime Environment vendor
     * <dt>java.specification.name       <dd>Java Runtime Environment name
     * <dt>java.class.version   <dd>Java class version number
     * <dt>java.class.path      <dd>Java classpath
     * <dt>java.library.path    <dd>Path for finding Java libraries
     * <dt>java.io.tmpdir       <dd>Default temp file path
     * <dt>java.compiler        <dd>Name of JIT to use
     * <dt>java.ext.dirs        <dd>Java extension path
     * <dt>os.name              <dd>Operating System Name
     * <dt>os.arch              <dd>Operating System Architecture
     * <dt>os.version           <dd>Operating System Version
     * <dt>file.separator       <dd>File separator ("/" on Unix)
     * <dt>path.separator       <dd>Path separator (":" on Unix)
     * <dt>line.separator       <dd>Line separator ("\n" on Unix)
     * <dt>user.name            <dd>User account name
     * <dt>user.home            <dd>User home directory
     * <dt>user.dir             <dd>User's current working directory
     * </dl>
     *
     * @param p the Properties object to insert the system properties into
     */
    static void insertSystemProperties(Properties p) {
 
        // the first thing we do is read the default platform encoding.
        // We know this string has to be expressed in the Portable Character
        // Set and so we can just convert byte to char directly
        byte[] charset = new byte[32]; // should be big enough ?
        int rc = LibraryGlue.get_default_charset(charset, charset.length);
        while (rc == org.ovmj.java.NativeConstants.ERANGE) {
            charset = new byte[charset.length*2];
            rc = LibraryGlue.get_default_charset(charset, charset.length);
        }

        String charsetName = makeRawString(charset);

        // if we couldn't tell what charset we have we don't define the
        // property and the EncodingManager will make its own assumptions.

        if (charsetName.length() > 0) {
            p.setProperty("file.encoding", charsetName);
        }

        // Temporarily make System.getProperty work by seeing our properties
        System.properties = p;

        // fill in the properties for encoding aliases
        System.initializeEncodingAliases();


        // Now it should be safe to create Strings from byte[]
        
        // these properties are relatively static

        // FIXME: is this our internal version number or the Java Platform
        // version we support?
        p.setProperty("java.version", "1.3"); 
        p.setProperty("java.vendor", "Purdue University"); 
        p.setProperty("java.vendor.url", "http://www.ovmj.org/"); 
        p.setProperty("java.vm.specification.version", "2.0"); 
        p.setProperty("java.vm.specification.vendor", "Sun Microsystems Inc.");
        p.setProperty("java.vm.specification.name", "Java Virtual Machine Specification"); 

        // FIXME: this should be tied to our build/version numbers
        p.setProperty("java.vm.version", "0.01"); 
        p.setProperty("java.vm.vendor", "Purdue University"); 
        p.setProperty("java.vm.name", "OVM"); 
        p.setProperty("java.specification.version", "1.3"); 
        p.setProperty("java.specification.vendor", "Sun Microsystems Inc."); 
        p.setProperty("java.specification.name", "Java Platform API Specification"); 
        p.setProperty("java.class.version", "47.0"); 
    
        // FIXME these are runtime properties but we don't support them yet anyway
        p.setProperty("java.class.path", ""); 
        p.setProperty("java.library.path", "");
        p.setProperty("java.ext.dirs", "");

        // The JDK leaves this unset
        //p.setProperty("java.compiler", ""); 

        // FIXME: These should be system specific but we don't run on win32
        p.setProperty("file.separator", "/"); 
        p.setProperty("path.separator", ":"); 
        p.setProperty("line.separator", "\n");

        // These next properties are all dynamic and must be found at runtime

        // the native query functions try to balance space versus time issues.
        // we could ask for all values at once and require lots of temporary
        // array space; or we could ask for one at a time and require more
        // native calls and a much bigger API. We comprise by grouping things
        // that are related and/or the info is retrieved by a single system
        // call.

        // temp arrays: short strings < 256 chars; long < 4096
        // short for simple names, long for paths (4096 is _PATH_MAX on
        // some linux systems)

        byte[] sstr = new byte[256];
        byte[] lstr1 = new byte[4096];
        byte[] lstr2 = new byte[4096];


        // if there are any "hard" errors each buffer reads "<unascertainable>"
        // Truncation is still possible in most cases.

        LibraryGlue.get_user_info(sstr, sstr.length, 
                                  lstr1, lstr1.length,
                                  lstr2, lstr2.length);

        p.setProperty("user.name", makeString(sstr));
        p.setProperty("user.home", makeString(lstr1));
        p.setProperty("user.dir", makeString(lstr2));

        LibraryGlue.get_system_info(sstr, sstr.length, 
                                    lstr1, lstr1.length,
                                    lstr2, lstr2.length);
        p.setProperty("os.name", makeString(sstr));
        p.setProperty("os.version", makeString(lstr1));
        p.setProperty("os.arch", makeString(lstr2));

        LibraryGlue.get_temp_directory(lstr1, lstr1.length);
        p.setProperty("java.io.tmpdir", makeString(lstr1));

        // an error here means truncated output
        LibraryGlue.get_ovm_home(lstr1, lstr1.length);
        p.setProperty("java.home", makeString(lstr1));
   }

    /**
     * Creates a new String using the bytes in data, up to the first
     * NUL (if present), using the platforms default decoding.
     *
     * <p>This method is not thread-safe and is only intended to be called
     * by insertSystemProperties.
     */
    private static String makeString(byte[] data) {
        boolean foundNul = false;
        int i;
        for (i = 0; i < data.length; i++) {
            if (data[i] == '\0') {
                foundNul = true;
                break;
            }
        }
        if (i == 0)
            return "";
        else 
            return new String(data, 0, foundNul ? i : data.length );
    }

    /**
     * Creates a new String by copying the bytes in data, up to the first
     * NUL (if present), into a character array that is used to construct 
     * a String. 
     * <p>We can't use the byte[] constructor for String because that will 
     * invoke the EncodingManager and we're using this method to define
     * the default character set encoding. The bytes are known to be simple
     * single-byte characters as they must be in the Portable Character Set
     *
     * <p>This method is not thread-safe and is only intended to be called
     * by insertSystemProperties.
     */
    private static String makeRawString(byte[] data) {
        char[] temp = new char[data.length];
        int i = 0;
        boolean foundNul = false;
        for (i = 0; i < temp.length; i++) {
            if (data[i] == '\0') {
                foundNul = true;
                break;
            }
            temp[i] = (char) data[i];
        }
        if (i == 0)
            return "";
        else 
            return new String(temp, 0, foundNul ? i : data.length );
    }

} // class VMRuntime
