/** 
 * Instruction's empty composite visitor.
 * @file s3/services/bytecode/verifier/S3CompositeVisitor.java 
 * @author Michel Pawlak
 **/
package s3.services.bytecode.verifier.visitor;

import ovm.services.bytecode.verifier.Instruction;
import s3.services.bytecode.verifier.S3InstructionVisitor;

/** 
 * Instruction's empty composite visitor.
 **/
public class S3CompositeVisitor extends S3InstructionVisitor {

    private S3InstructionVisitor[] visitors_;
    private int count_ = 0;

    public S3CompositeVisitor() {
	visitors_ = new S3InstructionVisitor[10];
    }

    public void add(S3InstructionVisitor visitor) {
	if (count_ >= visitors_.length) {
	    S3InstructionVisitor[] temp = visitors_;
	    visitors_ = new S3InstructionVisitor[count_ + 10];
	    System.arraycopy(temp, 0, visitors_, 0, temp.length);
	}   
	visitors_[count_++] = visitor;
    }

    public void visit(Instruction.Unimplemented i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DMUL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DNEG i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DREM i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DSTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DSTORE_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DSUB i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DUP i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DUP_X1 i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DUP_X2 i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DUP2 i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DUP2_X1 i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DUP2_X2 i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.F2D i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.F2I i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.F2L i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FADD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FALOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FASTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FCMPG i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FCMPL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FCONST_F i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FDIV i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FLOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FLOAD_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FMUL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FNEG i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FREM i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FRETURN i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FSTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FSTORE_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.FSUB i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.GETFIELD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.GETSTATIC i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.GOTO i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.GOTO_W i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.I2B i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.I2C i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.I2D i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.I2F i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.I2L i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.I2S i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IADD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IALOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IAND i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IASTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ALOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ALOAD_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ARETURN i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DRETURN i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DLOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DLOAD_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.CHECKCAST i) {
 	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
   public void visit(Instruction.ATHROW i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ASTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ASTORE_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.AALOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DALOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.BALOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.CALOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.AASTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.BASTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.CASTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DASTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ACONST_NULL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.BIPUSH i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DCONST i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ANEWARRAY i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ARRAYLENGTH i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.D2F i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.D2I i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.D2L i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DADD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DDIV i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DCMPG i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.DCMPL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ICONST_N i) {
 	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
   public void visit(Instruction.IDIV i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IF_ACMPSJ i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IF_ICMPSJ i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IFSJ i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IFNONNULL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IFNULL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IINC i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ILOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ILOAD_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IMUL i) {
 	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
   public void visit(Instruction.INEG i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.INSTANCEOF i) { 
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.INVOKEINTERFACE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.INVOKESPECIAL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.INVOKESTATIC i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.INVOKEVIRTUAL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IOR i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IREM i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IRETURN i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ISHL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ISHR i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ISTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ISTORE_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.ISUB i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IUSHR i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.IXOR i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.JSR i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.JSR_W i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.L2D i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.L2F i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.L2I i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LADD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LALOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LAND i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LASTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LCMP i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LCONST_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LDC i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LDC_W i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LDC2_W i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LDIV i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LLOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LLOAD_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LMUL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LNEG i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LOOKUPSWITCH i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LOR i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LREM i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LRETURN i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LSHL i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LSHR i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LSTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LSTORE_N i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LSUB i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LUSHR i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.LXOR i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.MONITORENTER i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.MONITOREXIT i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.MULTINEWARRAY i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.NEW i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.NEWARRAY i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.NOP i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.POP i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.POP2 i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.PUTFIELD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.PUTSTATIC i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.RET i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.RETURN i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.SALOAD i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.SASTORE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.SIPUSH i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.SWAP i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.TABLESWITCH i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }
    public void visit(Instruction.WIDE i) {
	for (int j = 0 ; j < count_ ; j++) {
	    visitors_[j].visit(i);
	}
    }

} // end of EmptyInstructionVisitor
