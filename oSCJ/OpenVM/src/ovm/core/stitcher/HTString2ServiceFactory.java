/** 
 * This hashtable class is generated by TGen 2.0r.
 *
 * PLEASE DO NOT MODIFY THIS SOURCE.
 *
 * @author Ben L. Titzer
 * @author TGen2
 **/

// HashtableName : HTString2ServiceFactory
// KeyType       : String
// ValueType     : ServiceFactory
// Compare       : ==
// HashFunction  : .hashCode()
// NotFound      : null
// Default size  : 8
// Synchronized  : no
// Serializable  : no
// Profiling     : no

package ovm.core.stitcher;



/**
 * This Hashtable is generated by TGen. Its key type is String and its
 * value type is ServiceFactory.
 * @author Ben L. Titzer
 * @author Christian Grothoff
 * @author TGen2
 **/
final public class HTString2ServiceFactory extends ovm.core.OVMBase {

    public static final int MININT = Integer.MIN_VALUE;
    public static final ServiceFactory NOTFOUND = null; 

    private static final int DEFAULT_SIZE = 8;

    private int mask;
    private int numElems_;
    private final Binding[] buckets;
     // profiling members 

    /**
     * Internal binding class. Stores a key, value, and a link
     * to the next binding in the chain.
     **/
    static private final class Binding extends ovm.core.OVMBase {
	Binding link;
	String key;
	ServiceFactory value;
	Binding(Binding link, String key, ServiceFactory value) {
	    this.link = link;
	    this.key = key;
	    this.value = value;
	} 
    }

    /**
     * Public default constructor.
     **/
    public HTString2ServiceFactory() {
	this(DEFAULT_SIZE);
    }

    /**
     * Constructor that specifies a hint size.
     **/
    public HTString2ServiceFactory(int hint) {	    
        int size = 8;
        while ( size < hint ) size *= 2;
        mask = size-1;
	this.buckets = new Binding[size];
	 // profiling code 
	
    }

    /**
     * gets something from hashtable and will return NOTFOUND.
     * Does _not_ insert anything into the hashtable.
     **/
    public final ServiceFactory get(String key) {
	Binding p = getAtOffset(mask&key.hashCode(), key);
	return (p != null) ? p.value : NOTFOUND;
    }

    /**
     * Put something into the hashtable. Checks to see if
     * the key is already in the hashtable, and if so, updates
     * the value associated with the key.
     **/
    public final void put(String key, ServiceFactory value) {

	int offset = mask&key.hashCode();
	Binding p = getAtOffset(offset, key);
	if ( p == null ) {
	    putAtOffset(offset, key, value);
        }
	else {
	    p.value = value;
        }
    }

    /**
     * Put something into the hashtable only if it is absent.
     * This will _not_ update the value of the specified key.
     **/
    public final void putIfAbsent(String key, ServiceFactory value) {

	int offset = mask&key.hashCode();
	Binding p = getAtOffset(offset, key);
	if ( p == null )
	    putAtOffset(offset, key, value);
    }

    /**
     * Return all keys in this table.
     **/
    public String[] keys() {
	int length = 0;
        for (int i = 0; i < buckets.length; i++) {
            Binding b = buckets[i];
            while (b != null) {
                length++;
                b = b.link;
        }   }
        String[] keys = new String[length];
        int index = 0;
        for (int i = 0; i < buckets.length; i++) {
            Binding b = buckets[i];
            while (b != null) {
                keys[index++] = b.key;
                b = b.link;
            }
        }
        return keys;
     }


    /**
     * Get something from the hashtable, and if not present, 
     * insert it.                                                
     **/
    public final ServiceFactory getPut(String key, 
	ServiceFactory value) {

	int offset = mask&key.hashCode();
	Binding p = getAtOffset(offset, key);
	if ( p == null ) {
	    putAtOffset(offset, key, value);
	    return NOTFOUND;
	}
	 
	return p.value;
    }


    /**
     * Insert something into the hashtable, even if it creates a duplicate.
     **/ 
    public final  void forcePut(String key,
					    ServiceFactory value) {
	int offset = mask&key.hashCode();
	buckets[offset] = new Binding(buckets[offset], key, value);
    }

    /**
     * Return the size (number of elements currently present) of the hashtable.
     **/
    public final int size() {
        return numElems_;
    }


    /**
     * private function to get something at a specified offset.
     **/
    private final Binding getAtOffset(int offset, String key) {
	 // profiling code 
	Binding p;

	for (p = buckets[offset]; p!= null; p = p.link) {
	     // profiling code 
	    if (key==(p.key)) break;
        }
	
	 // profiling code 
	 // profiling code 

	return p;
    }

    private final  void putAtOffset(int offset, 
					 String key,
					 ServiceFactory value) {
	if (getAtOffset(offset, key) == null) {
	     // profiling code 
	    buckets[offset] = new Binding(buckets[offset], key, value);
	    numElems_++;
    }
}

} // End HTString2ServiceFactory

