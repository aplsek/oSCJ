#define WIDE(X) (OPCODE_WIDE_OFFSET + OPCODE_##X)
#define OPCODE_WIDE_ILOAD WIDE(ILOAD)
#define OPCODE_WIDE_LLOAD WIDE(LLOAD)
#define OPCODE_WIDE_FLOAD WIDE(FLOAD)
#define OPCODE_WIDE_DLOAD WIDE(DLOAD)
#define OPCODE_WIDE_ALOAD WIDE(ALOAD)
#define OPCODE_WIDE_ISTORE WIDE(ISTORE)
#define OPCODE_WIDE_LSTORE WIDE(LSTORE)
#define OPCODE_WIDE_FSTORE WIDE(FSTORE)
#define OPCODE_WIDE_DSTORE WIDE(DSTORE)
#define OPCODE_WIDE_ASTORE WIDE(ASTORE)
#define OPCODE_WIDE_IINC WIDE(IINC)
#define OPCODE_WIDE_RET WIDE(RET)

case OPCODE_NOP: {
printf("NOP\n");

break;
}
case OPCODE_ACONST_NULL: {
printf("ACONST_NULL\n");

break;
}
case OPCODE_ICONST_M1: {
printf("ICONST_M1\n");

break;
}
case OPCODE_ICONST_0: {
printf("ICONST_0\n");

break;
}
case OPCODE_ICONST_1: {
printf("ICONST_1\n");

break;
}
case OPCODE_ICONST_2: {
printf("ICONST_2\n");

break;
}
case OPCODE_ICONST_3: {
printf("ICONST_3\n");

break;
}
case OPCODE_ICONST_4: {
printf("ICONST_4\n");

break;
}
case OPCODE_ICONST_5: {
printf("ICONST_5\n");

break;
}
case OPCODE_LCONST_0: {
printf("LCONST_0\n");

break;
}
case OPCODE_LCONST_1: {
printf("LCONST_1\n");

break;
}
case OPCODE_FCONST_0: {
printf("FCONST_0\n");

break;
}
case OPCODE_FCONST_1: {
printf("FCONST_1\n");

break;
}
case OPCODE_FCONST_2: {
printf("FCONST_2\n");

break;
}
case OPCODE_DCONST_0: {
printf("DCONST_0\n");

break;
}
case OPCODE_DCONST_1: {
printf("DCONST_1\n");

break;
}
case OPCODE_BIPUSH: {
jbyte istream_0 = ISTREAM_GET_SBYTE_AT(1);
printf("BIPUSH %d\n", istream_0);

break;
}
case OPCODE_SIPUSH: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("SIPUSH %d\n", istream_0);

break;
}
case OPCODE_LDC: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
jint c_value = (jint) get_constant(current_context, istream_0);
jbyte tag = get_constant_tag(current_context, istream_0);
printf("LDC %d (0x%x) [tag %d]\n", istream_0, c_value, tag);

break;
}
case OPCODE_LDC_W: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
jint c_value = (jint) get_constant(current_context, istream_0);
jbyte tag = get_constant_tag(current_context, istream_0);
printf("LDC_W %d (0x%x) [tag %d]\n", istream_0, c_value, tag);
break;
}
case OPCODE_LDC2_W: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
jlong c_value = get_constant_wide(current_context, istream_0);
jbyte tag = get_constant_tag(current_context, istream_0);
printf("LDC2_W %d (%lld) [tag %d]\n", istream_0, c_value, tag);
break;
}
case OPCODE_ILOAD: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("ILOAD %d\n", istream_0);

break;
}
case OPCODE_LLOAD: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("LLOAD %d\n", istream_0);

break;
}
case OPCODE_FLOAD: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("FLOAD %d\n", istream_0);

break;
}
case OPCODE_DLOAD: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("DLOAD %d\n", istream_0);

break;
}
case OPCODE_ALOAD: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("ALOAD %d\n", istream_0);

break;
}
case OPCODE_ILOAD_0: {
printf("ILOAD_0\n");

break;
}
case OPCODE_ILOAD_1: {
printf("ILOAD_1\n");

break;
}
case OPCODE_ILOAD_2: {
printf("ILOAD_2\n");

break;
}
case OPCODE_ILOAD_3: {
printf("ILOAD_3\n");

break;
}
case OPCODE_LLOAD_0: {
printf("LLOAD_0\n");

break;
}
case OPCODE_LLOAD_1: {
printf("LLOAD_1\n");

break;
}
case OPCODE_LLOAD_2: {
printf("LLOAD_2\n");

break;
}
case OPCODE_LLOAD_3: {
printf("LLOAD_3\n");

break;
}
case OPCODE_FLOAD_0: {
printf("FLOAD_0\n");

break;
}
case OPCODE_FLOAD_1: {
printf("FLOAD_1\n");

break;
}
case OPCODE_FLOAD_2: {
printf("FLOAD_2\n");

break;
}
case OPCODE_FLOAD_3: {
printf("FLOAD_3\n");

break;
}
case OPCODE_DLOAD_0: {
printf("DLOAD_0\n");

break;
}
case OPCODE_DLOAD_1: {
printf("DLOAD_1\n");

break;
}
case OPCODE_DLOAD_2: {
printf("DLOAD_2\n");

break;
}
case OPCODE_DLOAD_3: {
printf("DLOAD_3\n");

break;
}
case OPCODE_ALOAD_0: {
printf("ALOAD_0\n");

break;
}
case OPCODE_ALOAD_1: {
printf("ALOAD_1\n");

break;
}
case OPCODE_ALOAD_2: {
printf("ALOAD_2\n");

break;
}
case OPCODE_ALOAD_3: {
printf("ALOAD_3\n");

break;
}
case OPCODE_IALOAD: {
printf("IALOAD\n");

break;
}
case OPCODE_LALOAD: {
printf("LALOAD\n");

break;
}
case OPCODE_FALOAD: {
printf("FALOAD\n");

break;
}
case OPCODE_DALOAD: {
printf("DALOAD\n");

break;
}
case OPCODE_AALOAD: {
printf("AALOAD\n");

break;
}
case OPCODE_BALOAD: {
printf("BALOAD\n");

break;
}
case OPCODE_CALOAD: {
printf("CALOAD\n");

break;
}
case OPCODE_SALOAD: {
printf("SALOAD\n");

break;
}
case OPCODE_ISTORE: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("ISTORE %d\n", istream_0);

break;
}
case OPCODE_LSTORE: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("LSTORE %d\n", istream_0);

break;
}
case OPCODE_FSTORE: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("FSTORE %d\n", istream_0);

break;
}
case OPCODE_DSTORE: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("DSTORE %d\n", istream_0);

break;
}
case OPCODE_ASTORE: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("ASTORE %d\n", istream_0);

break;
}
case OPCODE_ISTORE_0: {
printf("ISTORE_0\n");

break;
}
case OPCODE_ISTORE_1: {
printf("ISTORE_1\n");

break;
}
case OPCODE_ISTORE_2: {
printf("ISTORE_2\n");

break;
}
case OPCODE_ISTORE_3: {
printf("ISTORE_3\n");

break;
}
case OPCODE_LSTORE_0: {
printf("LSTORE_0\n");

break;
}
case OPCODE_LSTORE_1: {
printf("LSTORE_1\n");

break;
}
case OPCODE_LSTORE_2: {
printf("LSTORE_2\n");

break;
}
case OPCODE_LSTORE_3: {
printf("LSTORE_3\n");

break;
}
case OPCODE_FSTORE_0: {
printf("FSTORE_0\n");

break;
}
case OPCODE_FSTORE_1: {
printf("FSTORE_1\n");

break;
}
case OPCODE_FSTORE_2: {
printf("FSTORE_2\n");

break;
}
case OPCODE_FSTORE_3: {
printf("FSTORE_3\n");

break;
}
case OPCODE_DSTORE_0: {
printf("DSTORE_0\n");

break;
}
case OPCODE_DSTORE_1: {
printf("DSTORE_1\n");

break;
}
case OPCODE_DSTORE_2: {
printf("DSTORE_2\n");

break;
}
case OPCODE_DSTORE_3: {
printf("DSTORE_3\n");

break;
}
case OPCODE_ASTORE_0: {
printf("ASTORE_0\n");

break;
}
case OPCODE_ASTORE_1: {
printf("ASTORE_1\n");

break;
}
case OPCODE_ASTORE_2: {
printf("ASTORE_2\n");

break;
}
case OPCODE_ASTORE_3: {
printf("ASTORE_3\n");

break;
}
case OPCODE_IASTORE: {
printf("IASTORE\n");

break;
}
case OPCODE_LASTORE: {
printf("LASTORE\n");

break;
}
case OPCODE_FASTORE: {
printf("FASTORE\n");

break;
}
case OPCODE_DASTORE: {
printf("DASTORE\n");

break;
}
case OPCODE_UNCHECKED_AASTORE: {
printf("UNCHECKED_AASTORE\n");
break;
}
case OPCODE_AASTORE: {
printf("AASTORE\n");

break;
}
case OPCODE_BASTORE: {
printf("BASTORE\n");

break;
}
case OPCODE_CASTORE: {
printf("CASTORE\n");

break;
}
case OPCODE_POP: {
printf("POP\n");

break;
}
case OPCODE_POP2: {
printf("POP2\n");

break;
}
case OPCODE_DUP: {
printf("DUP\n");

break;
}
case OPCODE_DUP_X1: {
printf("DUP_X1\n");

break;
}
case OPCODE_DUP_X2: {
printf("DUP_X2\n");

break;
}
case OPCODE_DUP2: {
printf("DUP2\n");

break;
}
case OPCODE_DUP2_X1: {
printf("DUP2_X1\n");

break;
}
case OPCODE_DUP2_X2: {
printf("DUP2_X2\n");

break;
}
case OPCODE_SWAP: {
printf("SWAP\n");

break;
}
case OPCODE_IADD: {
printf("IADD\n");

break;
}
case OPCODE_LADD: {
printf("LADD\n");

break;
}
case OPCODE_FADD: {
printf("FADD\n");

break;
}
case OPCODE_DADD: {
printf("DADD\n");

break;
}
case OPCODE_ISUB: {
printf("ISUB\n");

break;
}
case OPCODE_LSUB: {
printf("LSUB\n");

break;
}
case OPCODE_FSUB: {
printf("FSUB\n");

break;
}
case OPCODE_DSUB: {
printf("DSUB\n");

break;
}
case OPCODE_IMUL: {
printf("IMUL\n");

break;
}
case OPCODE_LMUL: {
printf("LMUL\n");

break;
}
case OPCODE_FMUL: {
printf("FMUL\n");

break;
}
case OPCODE_DMUL: {
printf("DMUL\n");

break;
}
case OPCODE_IDIV: {
printf("IDIV\n");

break;
}
case OPCODE_LDIV: {
printf("LDIV\n");

break;
}
case OPCODE_FDIV: {
printf("FDIV\n");

break;
}
case OPCODE_DDIV: {
printf("DDIV\n");

break;
}
case OPCODE_IREM: {
printf("IREM\n");

break;
}
case OPCODE_LREM: {
printf("LREM\n");

break;
}
case OPCODE_FREM: {
printf("FREM\n");

break;
}
case OPCODE_DREM: {
printf("DREM\n");

break;
}
case OPCODE_INEG: {
printf("INEG\n");

break;
}
case OPCODE_LNEG: {
printf("LNEG\n");

break;
}
case OPCODE_FNEG: {
printf("FNEG\n");

break;
}
case OPCODE_DNEG: {
printf("DNEG\n");

break;
}
case OPCODE_ISHL: {
printf("ISHL\n");

break;
}
case OPCODE_LSHL: {
printf("LSHL\n");

break;
}
case OPCODE_ISHR: {
printf("ISHR\n");

break;
}
case OPCODE_LSHR: {
printf("LSHR\n");

break;
}
case OPCODE_IUSHR: {
printf("IUSHR\n");

break;
}
case OPCODE_LUSHR: {
printf("LUSHR\n");

break;
}
case OPCODE_IAND: {
printf("IAND\n");

break;
}
case OPCODE_LAND: {
printf("LAND\n");

break;
}
case OPCODE_IOR: {
printf("IOR\n");

break;
}
case OPCODE_LOR: {
printf("LOR\n");

break;
}
case OPCODE_IXOR: {
printf("IXOR\n");

break;
}
case OPCODE_LXOR: {
printf("LXOR\n");

break;
}
case OPCODE_IINC: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
jbyte istream_1 = ISTREAM_GET_SBYTE_AT(2);
printf("IINC %d %d\n", istream_0, istream_1);

break;
}
case OPCODE_I2L: {
printf("I2L\n");

break;
}
case OPCODE_I2F: {
printf("I2F\n");

break;
}
case OPCODE_I2D: {
printf("I2D\n");

break;
}
case OPCODE_L2I: {
printf("L2I\n");

break;
}
case OPCODE_L2F: {
printf("L2F\n");

break;
}
case OPCODE_L2D: {
printf("L2D\n");

break;
}
case OPCODE_F2I: {
printf("F2I\n");

break;
}
case OPCODE_F2L: {
printf("F2L\n");

break;
}
case OPCODE_F2D: {
printf("F2D\n");

break;
}
case OPCODE_D2I: {
printf("D2I\n");

break;
}
case OPCODE_D2L: {
printf("D2L\n");

break;
}
case OPCODE_D2F: {
printf("D2F\n");

break;
}
case OPCODE_I2B: {
printf("I2B\n");

break;
}
case OPCODE_I2C: {
printf("I2C\n");

break;
}
case OPCODE_I2S: {
printf("I2S\n");

break;
}
case OPCODE_LCMP: {
printf("LCMP\n");

break;
}
case OPCODE_FCMPL: {
printf("FCMPL\n");

break;
}
case OPCODE_FCMPG: {
printf("FCMPG\n");

break;
}
case OPCODE_DCMPL: {
printf("DCMPL\n");

break;
}
case OPCODE_DCMPG: {
printf("DCMPG\n");

break;
}
case OPCODE_IFEQ: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IFEQ %d\n", istream_0);

break;
}
case OPCODE_IFNE: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IFNE %d\n", istream_0);

break;
}
case OPCODE_IFLT: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IFLT %d\n", istream_0);

break;
}
case OPCODE_IFGE: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IFGE %d\n", istream_0);

break;
}
case OPCODE_IFGT: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IFGT %d\n", istream_0);

break;
}
case OPCODE_IFLE: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IFLE %d\n", istream_0);

break;
}
case OPCODE_IF_ICMPEQ: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IF_ICMPEQ %d\n", istream_0);

break;
}
case OPCODE_IF_ICMPNE: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IF_ICMPNE %d\n", istream_0);

break;
}
case OPCODE_IF_ICMPLT: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IF_ICMPLT %d\n", istream_0);

break;
}
case OPCODE_IF_ICMPGE: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IF_ICMPGE %d\n", istream_0);

break;
}
case OPCODE_IF_ICMPGT: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IF_ICMPGT %d\n", istream_0);

break;
}
case OPCODE_IF_ICMPLE: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IF_ICMPLE %d\n", istream_0);

break;
}
case OPCODE_IF_ACMPEQ: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IF_ACMPEQ %d\n", istream_0);

break;
}
case OPCODE_IF_ACMPNE: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IF_ACMPNE %d\n", istream_0);

break;
}
case OPCODE_GOTO: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("GOTO %d\n", istream_0);

break;
}
case OPCODE_JSR: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("JSR %d\n", istream_0);

break;
}
case OPCODE_RET: {
unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
printf("RET %d\n", istream_0);

break;
}
case OPCODE_TABLESWITCH: {
int padding = PAD4(GETPC() + 1);
jint istream_1 = ISTREAM_GET_SINT_AT(1 + padding);
jint istream_2 = ISTREAM_GET_SINT_AT(5 + padding);
jint istream_3 = ISTREAM_GET_SINT_AT(9 + padding);
jint* istream_4 = ISTREAM_GET_SINT_ADDRESS_AT(13 + padding);
printf("%s %d %d %d %d\n", 
       "TABLESWITCH",
       istream_1, istream_2, istream_3, (int) istream_4);
break;
}
case OPCODE_LOOKUPSWITCH: {
int padding = PAD4(GETPC() + 1);
jint istream_1 = ISTREAM_GET_SINT_AT(1 + padding);
jint istream_2 = ISTREAM_GET_SINT_AT(5 + padding);
jint* istream_3 = ISTREAM_GET_SINT_ADDRESS_AT(9 + padding);
printf("%s %d %d %d\n", "LOOKUPSWITCH", istream_1, istream_2, (int)istream_3);
break;
}
case OPCODE_IRETURN: {
printf("IRETURN\n");

break;
}
case OPCODE_LRETURN: {
printf("LRETURN\n");

break;
}
case OPCODE_FRETURN: {
printf("FRETURN\n");

break;
}
case OPCODE_DRETURN: {
printf("DRETURN\n");

break;
}
case OPCODE_ARETURN: {
printf("ARETURN\n");

break;
}
case OPCODE_RETURN: {
printf("RETURN\n");

break;
}
case OPCODE_GETSTATIC: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("GETSTATIC %d\n", istream_0);

break;
}
case OPCODE_PUTSTATIC: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("PUTSTATIC %d\n", istream_0);

break;
}
case OPCODE_GETFIELD: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("GETFIELD %d\n", istream_0);

break;
}
case OPCODE_PUTFIELD: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("PUTFIELD %d\n", istream_0);

break;
}
case OPCODE_INVOKEINTERFACE: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
unsigned char istream_1 = ISTREAM_GET_UBYTE_AT(3);
unsigned char istream_2 = ISTREAM_GET_UBYTE_AT(4);
printf("INVOKEINTERFACE %d %d %d\n", istream_0, istream_1, istream_2);

break;
}

case OPCODE_INVOKEINTERFACE_QUICK: {

unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1); 
unsigned char stream_in_1 = ISTREAM_GET_UBYTE_AT(3); // arg count
unsigned char stream_in_2 = ISTREAM_GET_UBYTE_AT(4); // wide arg count
unsigned short argLength = stream_in_1 + stream_in_2;
jref stack_in_0 = PEEK(argLength).jref;
Blueprint* bp = HEADER_BLUEPRINT(stack_in_0);
ByteCode* cf;
cf = (ByteCode*)((bp->ifTable->values[istream_0]));
printf("INVOKEINTERFACE_QUICK %u (%.*s) %u\n", istream_0, 
					      cf->dbg_string->length,
					      cf->dbg_string->values,
						argLength);

break;
}

case OPCODE_NEW: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("NEW %d\n", istream_0);

break;
}
case OPCODE_NEW_QUICK: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
Blueprint* target_bp 
    = (Blueprint*)get_constant(current_context, istream_0);
Blueprint* take_two
    = (Blueprint*)get_constant(current_context, istream_0);
struct arr_jbyte* name = target_bp->dbg_string;
struct arr_jbyte* name2 = take_two->dbg_string;
printf("NEW_QUICK %d (%.*s) (%.*s)\n", istream_0, name->length, name->values,
		  name2->length, name2->values);

break;
}


case OPCODE_ANEWARRAY: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("ANEWARRAY %d\n", istream_0);

break;
}
case OPCODE_ANEWARRAY_QUICK: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("ANEWARRAY_QUICK %d\n", istream_0);

break;
}
case OPCODE_ARRAYLENGTH: {
printf("ARRAYLENGTH\n");

break;
}
case OPCODE_ATHROW: {
printf("ATHROW\n");

break;
}
case OPCODE_CHECKCAST: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("CHECKCAST %d\n", istream_0);

break;
}
case OPCODE_CHECKCAST_QUICK: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
Blueprint* target_bp 
    = (Blueprint*)get_constant(current_context, istream_0);
struct arr_jbyte* name = target_bp->dbg_string;
printf("CHECKCAST_QUICK %d (%.*s)\n", istream_0, name->length, name->values);
break;
}

case OPCODE_INSTANCEOF: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("INSTANCEOF %d\n", istream_0);

break;
}

case OPCODE_INSTANCEOF_QUICK: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
Blueprint* target_bp 
    = (Blueprint*)get_constant(current_context, istream_0);
struct arr_jbyte* name = target_bp->dbg_string;
printf("INSTANCEOF_QUICK %d (%.*s)\n", istream_0, name->length, name->values);
break;
}
case OPCODE_MONITORENTER: {
printf("MONITORENTER\n");

break;
}
case OPCODE_MONITOREXIT: {
printf("MONITOREXIT\n");

break;
}
case OPCODE_WIDE: {
printf("WIDE\n");
}
case OPCODE_MULTIANEWARRAY: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
unsigned char istream_1 = ISTREAM_GET_UBYTE_AT(3);
printf("MULTIANEWARRAY %d %d\n", istream_0, istream_1);

break;
}
case OPCODE_MULTIANEWARRAY_QUICK: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
unsigned char istream_1 = ISTREAM_GET_UBYTE_AT(3);
printf("MULTIANEWARRAY_QUICK %d %d\n", istream_0, istream_1);
break;
}


case OPCODE_IFNULL: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IFNULL %d\n", istream_0);

break;
}
case OPCODE_IFNONNULL: {
jshort istream_0 = ISTREAM_GET_SSHORT_AT(1);
printf("IFNONNULL %d\n", istream_0);

break;
}
case OPCODE_GOTO_W: {
jint istream_0 = ISTREAM_GET_SINT_AT(1);
printf("GOTO_W %d\n", istream_0);

break;
}
case OPCODE_JSR_W: {
jint istream_0 = ISTREAM_GET_SINT_AT(1);
printf("JSR_W %d\n", istream_0);

break;
}
case OPCODE_LDC_INT_QUICK: {
 int istream_0 = ISTREAM_GET_SINT_AT(1);
 printf("LDC_INT_QUICK %d\n", istream_0);
 break;
}
case OPCODE_LDC_LONG_QUICK: {
 jlong istream_0 = ISTREAM_GET_LONG_AT(1);
 printf("LDC_INT_QUICK %lld\n", istream_0);
 break;
}
case OPCODE_LDC_FLOAT_QUICK: {
 float istream_0 = ISTREAM_GET_FLOAT_AT(1);
 printf("LDC_FLOAT_QUICK %f\n", istream_0);
 break;
}
case OPCODE_LDC_DOUBLE_QUICK: {
 double istream_0 = ISTREAM_GET_DOUBLE_AT(1);
 printf("LDC_DOUBLE_QUICK %f\n", istream_0);
 break;
}
case OPCODE_LDC_REF_QUICK: {
 unsigned char istream_0 = ISTREAM_GET_UBYTE_AT(1);
 printf("LDC_REF_QUICK %d\n", istream_0);
 break;
}
case OPCODE_LDC_W_REF_QUICK: {
 unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
 printf("LDC_W_REF_QUICK %d\n", istream_0);
 break;
}
case OPCODE_GETFIELD_QUICK: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("GETFIELD_QUICK %d\n", istream_0);

break;
}
case OPCODE_REF_GETFIELD_QUICK: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("REF_GETFIELD_QUICK %d\n", istream_0);

break;
}
case OPCODE_PUTFIELD_QUICK: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("PUTFIELD_QUICK %d\n", istream_0);

break;
}
case OPCODE_GETFIELD2_QUICK: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("GETFIELD2_QUICK %d\n", istream_0);

break;
}
case OPCODE_PUTFIELD2_QUICK: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("PUTFIELD2_QUICK %d\n", istream_0);

break;
}
case OPCODE_INVOKEVIRTUAL_QUICK: {
Blueprint* bp;
ByteCode* cf;
unsigned short vtblIndex = ISTREAM_GET_USHORT_AT(1);
unsigned short argCount = ISTREAM_GET_UBYTE_AT(3);
unsigned short wideArgCount = ISTREAM_GET_UBYTE_AT(4);
unsigned short argLength = argCount + wideArgCount;
jref stack_in_0 = PEEK(argLength).jref;
if (stack_in_0 == NULL_REFERENCE) {
	printf("INVOKEVIRTUAL_QUICK %d NULL! %d\n", vtblIndex, argLength);
	break;
	
}
bp = HEADER_BLUEPRINT(stack_in_0);
if (vtblIndex >= bp->vTable->length) {
   printf("INVOKEVIRTUAL_QUICK <INVALID INDEX>\n");
   break;
}
cf = (ByteCode*)((bp->vTable->values[vtblIndex]));
if (cf == NULL) {
   printf("INVOKEVIRTUAL_QUICK %d NULL! %d\n", vtblIndex, argLength);
   break;
}
printf("INVOKEVIRTUAL_QUICK %d (%.*s) %d\n", vtblIndex,
					    cf->dbg_string->length,
					    cf->dbg_string->values,
 					   argLength);

break;
}


case OPCODE_INVOKENONVIRTUAL_QUICK: {
Blueprint* bp;
ByteCode* cf;
unsigned short nvIndex = ISTREAM_GET_USHORT_AT(1);
unsigned char argCount = ISTREAM_GET_UBYTE_AT(3);
unsigned char wideArgCount = ISTREAM_GET_UBYTE_AT(4);
unsigned short argLength = argCount + wideArgCount;
jref stack_in_0 = PEEK(argLength).jref;
if (stack_in_0 == NULL_REFERENCE) {
	printf("INVOKENONVIRTUAL_QUICK %d NULL! %d\n", nvIndex, argLength);
	break;
	
}
bp = HEADER_BLUEPRINT(stack_in_0);
cf = (ByteCode*)((bp->nvTable->values[nvIndex]));
printf("INVOKENONVIRTUAL_QUICK %d (%.*s) %d\n", nvIndex,
					    cf->dbg_string->length,
					    cf->dbg_string->values,
 					   argLength);
break;
}

case OPCODE_INVOKENONVIRTUAL2_QUICK: {
Blueprint* bp;
ByteCode* cf;
unsigned short stream_in_0 = ISTREAM_GET_USHORT_AT(1);
unsigned short index = ISTREAM_GET_USHORT_AT(3);
unsigned short argCount = ISTREAM_GET_UBYTE_AT(5);
unsigned short wideArgCount = ISTREAM_GET_UBYTE_AT(6);
unsigned short stream_in_4 = ISTREAM_GET_USHORT_AT(7);
unsigned short argLength = argCount + wideArgCount;
jref stack_in_0 = PEEK(argLength).jref;
if (stack_in_0 == NULL_REFERENCE) {
	printf("INVOKENONVIRTUAL_QUICK %d NULL! %d\n", index, argLength);
	break;
	
}
bp = GET_CONSTANT_BP_RESOLVED_INSTANCE_METHODREF(stream_in_0);
cf = (ByteCode*)(bp->nvTable->values[index]);
printf("INVOKENONVIRTUAL2_QUICK %d %d (%.*s) %d\n", stream_in_0, index,
					    cf->dbg_string->length,
					    cf->dbg_string->values,
 					   argLength);
break;
}

case OPCODE_INVOKESUPER_QUICK: {
Blueprint* bp;
ByteCode* cf;
unsigned short stream_in_0 = ISTREAM_GET_USHORT_AT(1);
unsigned short index = ISTREAM_GET_USHORT_AT(3);
unsigned short argCount = ISTREAM_GET_UBYTE_AT(5);
unsigned short wideArgCount = ISTREAM_GET_UBYTE_AT(6);
unsigned short argLength = argCount + wideArgCount;
jref stack_in_0 = PEEK(argLength).jref;
if (stack_in_0 == NULL_REFERENCE) {
	printf("INVOKESUPER_QUICK %d NULL! %d\n", index, argLength);
	break;
	
}
bp = GET_CONSTANT_BP_RESOLVED_INSTANCE_METHODREF(stream_in_0);
cf = (ByteCode*)((bp->vTable->values[index]));
printf("INVOKESUPER_QUICK %d %d (%.*s) %d\n", stream_in_0, index,
					    cf->dbg_string->length,
					    cf->dbg_string->values,
 					   argLength);

break;
}

case OPCODE_WIDE_ILOAD: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_ILOAD %d\n", istream_0);
break;
}
case OPCODE_WIDE_LLOAD: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_LLOAD %d\n", istream_0);

break;
}
case OPCODE_WIDE_FLOAD: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_FLOAD %d\n", istream_0);

break;
}
case OPCODE_WIDE_DLOAD: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_DLOAD %d\n", istream_0);

break;
}
case OPCODE_WIDE_ALOAD: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_ALOAD %d\n", istream_0);

break;
}
case OPCODE_WIDE_ISTORE: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_ISTORE %d\n", istream_0);

break;
}
case OPCODE_WIDE_LSTORE: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_LSTORE %d\n", istream_0);

break;
}
case OPCODE_WIDE_FSTORE: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_FSTORE %d\n", istream_0);

break;
}
case OPCODE_WIDE_DSTORE: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_DSTORE %d\n", istream_0);

break;
}
case OPCODE_WIDE_ASTORE: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_ASTORE %d\n", istream_0);

break;
}
case OPCODE_WIDE_IINC: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
jshort istream_1 = ISTREAM_GET_SSHORT_AT(3);
printf("WIDE_IINC %d %d\n", istream_0, istream_1);

break;
}
case OPCODE_WIDE_RET: {
unsigned short istream_0 = ISTREAM_GET_USHORT_AT(1);
printf("WIDE_RET %d\n", istream_0);

break;
}

case OPCODE_ROLL: {
unsigned short span = ISTREAM_GET_USHORT_AT(1);
jbyte count = ISTREAM_GET_SBYTE_AT(3);
printf("ROLL %d %d\n", span, count);

break;
}

case OPCODE_POLLCHECK: {
printf("POLLCHECK\n");
break;
}

case OPCODE_LOAD_SHST_FIELD: {
printf("LOAD_SHST_FIELD %d\n", ISTREAM_GET_USHORT_AT(1));
break;
}
case OPCODE_LOAD_SHST_METHOD: {
printf("LOAD_SHST_METHOD %d\n", ISTREAM_GET_USHORT_AT(1));
break;
}
case OPCODE_LOAD_SHST_FIELD_QUICK: {
printf("LOAD_SHST_FIELD_QUICK %d\n", ISTREAM_GET_USHORT_AT(1));
break;
}
case OPCODE_LOAD_SHST_METHOD_QUICK: {
unsigned short idx = ISTREAM_GET_USHORT_AT(1);
printf("LOAD_SHST_METHOD_QUICK %d\n", idx);

break;
}
