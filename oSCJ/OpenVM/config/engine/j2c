## -engine=j2c selects the bytecode to C++ compiler, j2c.  J2c
## 	supports the following options:

# flags for g++.  Make sure that file names like
# "./java/lang/Object.java" make their way into the executable's debug
# symbols.  With newer gcc/linux versions, this means disabling dwarf2.

# seems to be more robust to large source files than stabs+, but did
# not try too hard, and line numbers do not work, anyway

-cflags		"-gdwarf-2"

# make debugging easier
#-inline "none" 

##   -opt controls j2c's optimization strategy, three settings are defined:
##   	-opt=build produces the fastest build time
##	-opt=debug produces a debugger-friendly executable
##   	-opt=run   produces the fastest ovm image
##   	-opt=none  compiles all code in the TypeNameClosure without optimization
##   	(default build)
-opt		"build"

##   -no-inline-with-safe-points forces noinline as if -safe-points=naked
# -no-inline-with-safe-points

##   -catch-points-used forces live variable unioning
# -catch-points-used

##   -no-cpp-exceptions disables use of C++ exceptions
# -no-cpp-exceptions

## -c-exceptions implements exceptions in plain C (in a different way from -no-cpp-exceptions)
-c-exceptions "true"
#-c-exceptions-count "true"

##   -do-barrier-prof enabled safepoint barrier profiling
# -do-barrier-prof

##   -counter-exit-pollcheck enables pollchecks on method exit if using counter implementation for precise GC
# -counter-exit-pollcheck

##   -propagate-copies turns on copy propagation to eliminate C++ local 
##	variables for java locals and stack slots
-propagate-copies	"true"

##   -assume-liveness forces PointerStack and Henderson stack walking code 
##      to run more slowly
# -assume-liveness

##   -j2c-prof turns on gprof profiling (default off).
-j2c-prof	"-off"

# disable warnings from IRewriter, j2c can generate all the warnings
# that matter without a lot of false posititves
-log		""

##   -pad-image-size specifies the amount up to which to pad the image
##       size.  needed for systems like RTEMS where the code location is
##       predetermined by image size.
-pad-image-size    "8M"

##   -linker-options specifies additional linker options
-linker-options ""

# run the compiler
s3.services.bootimage.ImageObserver 					\
	s3.services.j2c.J2cImageCompiler(OVMMakefile.in, gdbinit.in, 	\
			 		 cflags,			\
					 no-inline-with-safe-points,	\
					 catch-points-used,             \
					 no-cpp-exceptions,             \
					 c-exceptions,			\
					 c-exceptions-count,		\
					 do-barrier-prof,               \
					 counter-exit-pollcheck,	\
					 propagate-copies,		\
					 assume-liveness,               \
					 pad-image-size,		\
					 linker-options)

#ovm.core.services.memory.LocalReferenceIterator \
#	s3.services.j2c.HendersonLocalReferenceIterator

ovm.core.execution.Activation$Factory \
	s3.services.j2c.J2cActivation$Factory

%include "engine/j2c-opt-"opt, \
	 "engine/j2c-prof"j2c-prof

