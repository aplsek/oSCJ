dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.52)
AC_INIT([ovm],[0.0.0],[ovm@mail.ovmj.org])
cache_file=config.cache

AC_CANONICAL_SYSTEM

dnl define a special macro to run tests in simulator when we 
dnl crosscompile for RTEMS



dnl if we have no vendor in target, the AC_CANONICAL_SYSTEM
dnl makes the vendor "unknown" ; but it breaks rtems... 
dnl yes, this is a hack

AC_CONFIG_HEADER([src/native/common/include/autodefs.h])

dnl First, check for a supported cpu, choose an implemenation of 
dnl common/include/activation.h, and expose the cpu type to C code
dnl through OVM_ARCH.  Give things the prefix OVM_ to avoid clashing with 
dnl anything the system may define

AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_CPP
AC_CHECK_TOOL(AR,ar,:)
AC_CHECK_TOOL(NM,nm,:)
AC_CHECK_TOOL(OBJCOPY,objcopy,:)
dnl JV_REQUIRE_PROG(AR, ar)
dnl JV_REQUIRE_PROG(NM, nm)
AC_CHECK_PROG(MAKEINFO,makeinfo,makeinfo)
AC_CHECK_PROG(TEXI2DVI,texi2dvi,texi2dvi)
AC_CHECK_PROG(INSTALL_INFO,install-info,install-info)

dnl We might be able to generate more/better docs with this program available
dnl AC_CHECK_PROG(TEXI2HTML, texi2html)

JV_PROG_JAVA
JV_PROG_JAVAC
JV_PROG_JAVADOC

dnl we have to be picky about make versions
JV_GNU_MAKE

dnl this is sort of useless, but ant complains bitterly when it isn't around.
JV_JAVA_HOME
dnl JV_JAVACMD

AC_ARG_ENABLE(any-host-vm,
              [AC_HELP_STRING([--enable-any-host-vm],
			      [attempt to build OVM with unknown java version])])

AC_ARG_WITH(ant,
	    [AC_HELP_STRING([--with-ant],
			    [compile code with ant javac and depend tasks (works best with ant-1.6.1)])],
	    [], [with_ant=no])

AC_ARG_WITH(sse-float,[AC_HELP_STRING([--with-sse-float],[attempt to use SSE instructions for single-precision floats (default is YES if on an x86 machine).  This option is ignored on non-x86 machines.])])

AC_ARG_WITH(sse2-double,[AC_HELP_STRING([--with-sse2-double],[attempt to use SSE instructions for single-precision floats (default is YES if on an x86 machine).  This option is ignored on non-x86 machines.])])

# --- AWK checks -----------------
#
# this is only to have hexadecimal numbers in awk script that
# generates the linker script

# http://autoconf-archive.cryp.to/ax_need_awk.html
AC_DEFUN([AX_NEED_AWK],[
  AC_REQUIRE([AC_PROG_AWK])

  AS_IF([test "x$AWK" = "x"],[
    AC_MSG_ERROR([cannot find awk, bailing out])
  ])
])


#http://autoconf-archive.cryp.to/ax_try_awk_expout.html
AC_DEFUN([AX_TRY_AWK_EXPOUT], [
  AC_REQUIRE([AX_NEED_AWK])

  AC_MSG_CHECKING([if $AWK supports $1])

  cat <<EOF > conftest.out
$2
EOF

  ax_try_awk_output=`$AWK '{ [$3] ; }' conftest.out 2> /dev/null`
  ax_try_awk_result=$?

  rm -f conftest.out

  AS_IF([test $ax_try_awk_result -eq 0],[
    AS_IF([test "X$ax_try_awk_output" = "X[$4]"],[
        AC_MSG_RESULT([yes])
        $5
    ],[
        AC_MSG_RESULT([no])
        $6
    ])
  ],[
    AC_MSG_RESULT([no])
    $6
  ])
])

#http://autoconf-archive.cryp.to/ax_check_awk_strtonum.html
AC_DEFUN([AX_CHECK_AWK_STRTONUM], [
  AX_TRY_AWK_EXPOUT([strtonum()],
    [],[ print strtonum(15) ],[15],
    [$1],[$2])
])

AX_CHECK_AWK_STRTONUM([],
 AC_MSG_ERROR([[Needs awk that supports strnum function for the linker script.]])
)

# --- AWK checks end here -----------------

#
# This doesn't have to be here, and thus should not
#  jrt.c only needs this info, which is compiled via gen-ovm, which already
#  has this info
#
#AC_ARG_WITH(ovm-main-class, 
#	[AC_HELP_STRING([--with-ovm-main-class=CLASS],
#	 	[built-in main class name for generated machines (needed for RTEMS)])],
#	[],
#	[with_ovm_main_class=no]
#)

AC_ARG_WITH(xenomai,
	[AC_HELP_STRING([--with-xenomai],
			[build OVM with Xenomai RT Linux support (off by default)])],
	[],
	[with_xenomai=no])

AC_ARG_WITH(interrupts,
	[AC_HELP_STRING([--with-interrupts],
			[build OVM with hardware interrupts support, depends on xenomai, turned on by default with xenomai])],
	[],
	[
	if test "$with_xenomai" = yes ; then
		with_interrupts=yes
	fi])

AC_ARG_WITH(image-location,[AC_HELP_STRING([--with-image-location],[Force the image to be placed at the given location.  This is needed for RTEMS targets.])],
    [],
    [with_image_location=0])

 
if test "$with_ant" = yes ; then
	JV_REQUIRE_PROG(ANT, ant)
elif test "$with_ant" = no; then
	ANT=""
else
	ANT=$with_ant
fi
AC_SUBST(ANT)

AC_DEFINE_UNQUOTED(FORCE_IMAGE_LOCATION, $with_image_location, [Force image location])

#AC_DEFINE_UNQUOTED(OVM_MAIN_CLASS, "$with_ovm_main_class", [Force main class name])

            
AC_DEFUN(REQUIRE_VERSION, [
  if echo "$1" | egrep -q '$2'; then :
     else
     if test "$enable_any_host_vm" != yes ; then
     	AC_MSG_ERROR("unsupported $3: $4 required")
     fi
  fi])


dnl modified version of the macro used internally by AC_RUN_IFELSE
dnl runs the program using a runner TEST_RUNNER

# _AC_RUN_IFELSE(PROGRAM, [ACTION-IF-TRUE], [ACTION-IF-FALSE])
# ------------------------------------------------------------
# Compile, link, and run.
# This macro can be used during the selection of a compiler.
# We also remove conftest.o as if the compilation fails, some compilers
# don't remove it.  We remove gmon.out and bb.out, which may be
# created during the run if the program is built with profiling support.

export ltestindex=0

m4_define([_AC_RUN_IFELSE],
[m4_ifvaln([$1], [AC_LANG_CONFTEST([$1])])dnl

if test \( X${host_alias} = Xsparc-rtems4.8 \) -o \( X${host_alias} = Xi386-rtems4.8 \) ; then

	mv conftest.$ac_ext conftest.$ac_ext.orig
	cat <<EOF >conftest.$ac_ext
#include <bsp.h>
#include <stdlib.h>
#include <stdio.h>
EOF

	sed -e 's/.*main()/int test_main()/g' \
		>> conftest.$ac_ext < conftest.$ac_ext.orig

	cat <<EOF >>conftest.$ac_ext

rtems_task Init(rtems_task_argument ignored) {
	int r;

	printf("----PROGRAM-STARTS-HERE----\n");
	r=test_main();
	printf("----PROGRAM-ENDS-HERE---- %d\n",r);
	exit(r);
}

/* configuration information */

#define CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER

#define CONFIGURE_RTEMS_INIT_TASKS_TABLE

#define CONFIGURE_MAXIMUM_TASKS 1

#define CONFIGURE_INIT

#include <rtems/confdefs.h>

/* end of file */
EOF

	ltestindex=`expr $ltestindex + 1`
	cp conftest.$ac_ext torun_conftest_$ltestindex.$ac_ext
fi # rtems

rm -f conftest$ac_exeext
AS_IF([_AC_DO_VAR(ac_link) && _AC_DO_TOKENS($TEST_RUNNER ./conftest$ac_exeext)],
      [$2],
      [echo "$as_me: program exited with status $ac_status" >&AS_MESSAGE_LOG_FD
_AC_MSG_LOG_CONFTEST
m4_ifvaln([$3],
	  [( exit $ac_status )
$3])dnl])[]dnl
rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext conftest.$ac_objext m4_ifval([$1],
						     [conftest.$ac_ext])[]dnl
])# _AC_RUN_IFELSE

if test X${host_alias} = Xsparc-rtems4.8 ; then
	export TEST_RUNNER="sparc-rtems4.8-run"
elif test X${host_alias} = Xi386-rtems4.8 ; then
        export TEST_RUNNER="i386-rtems4.8-run"
else
	export TEST_RUNNER=""
fi

echo "Host is $host, host alias is $host_alias, test runner is $TEST_RUNNER"

# AC_RUN_IFELSE_CROSS
#  input, [action-if-true], [action-if-false], [action-if-cross-compiling]

AC_DEFUN( AC_RUN_IFELSE_CROSS, [
	if test \( X${host_alias} = Xsparc-rtems4.8 \) -o \( X${host_alias} = Xi386-rtems4.8 \) ; then
		save_cross_compiling=$cross_compiling
		cross_compiling=no
		AC_RUN_IFELSE( $@ )
		cross_compiling=$save_cross_compiling
	else
		AC_RUN_IFELSE( $@ )
	fi
])


JV_JAVA_VENDOR
REQUIRE_VERSION($JAVA_VENDOR, [[^[" ]*(Apple|Sun|IBM)]], [java vendor], [Sun JDK])
dnl font lock hack"
JV_JVM_VERSION
REQUIRE_VERSION($JVM_VERSION, [([^1.4.[12]]|[^1.5.0])], [java version], [1.4.1 or later])

JV_JAVA_PROP(JAVA_BOOT_PATH, sun.boot.class.path)

AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_C_VOLATILE

AC_CHECK_HEADERS(sys/mman.h)
AC_CHECK_HEADERS(error.h)
AC_CHECK_HEADERS(err.h)
AC_CHECK_HEADERS(sys/filio.h)
AC_CHECK_HEADERS(sched.h)
AC_CHECK_HEADERS(strings.h)
AC_CHECK_HEADERS(sys/io.h)

dnl We need to see if nl_langinfo is available to get the default character
dnl encoding. Seems easier to do it here than figure out what POSIX #defines
dnl we should be looking for
AC_CHECK_HEADERS(langinfo.h)


case $target_cpu in
  x86_64|i?86)    
           AC_DEFINE(OVM_X86, 1, [define if running on a real computer])
	   OVM_X86=1
           OVM_ARCH=i686
	   dnl keep java floating-point semantics
	   pre_sse_CFLAGS="$CFLAGS"
	   using_sse2=no
           if test "$cross_compiling" == yes ; then
	     case $with_sse_float in
	       yes)
	           AC_MSG_WARN([[Cross-compiling - assuming that the host can use SSE floats]])
	           CFLAGS="$pre_sse_CFLAGS -msse -mfpmath=sse"
		   ;;
	       no)
	           ;;
	       "")
	           AC_MSG_WARN([[Cross-compiling - SSE floats are disabled by default]])
	           AC_MSG_WARN([[you can enable them explicitly with --with-sse-float=yes]])
	           ;;
               *)
	           AC_MSG_ERROR([$with_sse_float is not a valid argument to --with-sse-float])
		   ;;
             esac
	   else
	     case $with_sse_float in
	       yes|"")
                   AC_MSG_CHECKING(if SSE floats work)
		   CFLAGS="$pre_sse_CFLAGS -msse -mfpmath=sse"
		   AC_RUN_IFELSE_CROSS(AC_LANG_SOURCE([[
		       float f(float a,float b) {
		           return a+b;
	               }
		       int main() {
		           if (f((float)1.,(float)2.)!=(float)3.) {
			       return 1;
			   }
			   return 0;
		       }
		   ]]),[
		       AC_MSG_RESULT(yes)
		   ],[
		       AC_MSG_RESULT(no)
		       CFLAGS="$pre_sse_CFLAGS"
		   ])
		   ;;
               no)
	           ;;
               *)
	           AC_MSG_ERROR([$with_sse_float is not a valid argument to --with-sse-float])
		   ;;
             esac
	   fi
           if test "$cross_compiling" == yes ; then
	     case $with_sse2_double in
	       yes)
		 AC_MSG_WARN([[Cross-compiling - assuming the host can use SSE2 doubles]])
		 CFLAGS="$pre_sse_CFLAGS -msse2 -mfpmath=sse"
		 ;;
	       no)
	         ;;
	       "")
	         AC_MSG_WARN([[Cross-compiling - SSE2 doubles are disabled by default]])
	         AC_MSG_WARN([[you can enable them explicitly with --with-sse2-double=yes]])
	         ;;
               *)
	         AC_MSG_ERROR([$with_sse_float is not a valid argument to --with-sse2-double])
		   ;;
             esac
	   else
	     case $with_sse2_double in
	       yes|"")
                   AC_MSG_CHECKING(if SSE2 doubles work)
		   my_old_CFLAGS="$CFLAGS"
		   CFLAGS="$pre_sse_CFLAGS -msse2 -mfpmath=sse"
		   AC_RUN_IFELSE_CROSS(AC_LANG_SOURCE([[
		       double f(double a,double b) {
		           return a+b;
	               }
		       int main() {
		           if (f(1.,2.)!=3.) {
			       return 1;
			   }
			   return 0;
		       }
		   ]]),[
		       AC_MSG_RESULT(yes)
		       using_sse2=yes
		   ],[
		       AC_MSG_RESULT(no)
		       CFLAGS="$my_old_CFLAGS"
		   ])
		   ;;
               no)
	           ;;
               *)
	           AC_MSG_ERROR([$with_sse_float is not a valid argument to --with-sse2-double])
		   ;;
             esac
           fi
	   if test "$using_sse2" = no; then
	       CFLAGS="$CFLAGS -ffloat-store"
	   fi
	   dnl work around x86 floating-point bug present in gcc versions 
	   dnl 3.0 through 3.2.  gcc 2.x doesn't work at all!
	   CFLAGS="$CFLAGS -fno-schedule-insns2"
           if test "$target_cpu" = x86_64; then
              NEED_M32=yes
           fi
	   ;;
  powerpc) AC_DEFINE(OVM_PPC, 1, [define if running on a slow mac])
           OVM_ARCH=powerpc
	   ;;
      arm) AC_DEFINE(OVM_ARM, 1, [define if running on a tiny arm])
           OVM_ARCH=arm
	   CFLAGS="-fdollars-in-identifiers -fno-omit-frame-pointer $CFLAGS"
	   CXXFLAGS="-fdollars-in-identifiers -fno-omit-frame-pointer $CXXFLAGS"
	   ;;
    sparc) AC_DEFINE(OVM_SPARC, 1, [define if running on an old sparc])
	   OVM_SPARC=1
           OVM_ARCH=sparc
	   ;;
  *)       OVM_ARCH=unknown;;
esac

if test "$NEED_M32" = yes; then
  CFLAGS="-m32 $CFLAGS"
  LDFLAGS="-m32 $LDFLAGS"
fi

AC_C_BIGENDIAN()

AC_ARG_ENABLE(thumb,
              [AC_HELP_STRING([--enable-thumb],
                              [generates ARM Thumb high-density code])])

if test "$enable_thumb" != ""
then
  AC_DEFINE(ARM_THUMB, 1, [define if generating arm thumb code])
  CFLAGS="$CFLAGS -mthumb"
  if test "$OVM_ARCH" != "arm"
  then
   AC_MSG_ERROR(bad --enable-thumb option: can only be used if target is ARM)
  fi
fi


dnl gcc's secret option for dealing with binary compatiblity 
dnl magic such as linux/amd64's lib32 directories
MULTI_OS_DIRECTORY=`$CC $CFLAGS -print-multi-os-directory`

AC_SUBST(OVM_ARCH)
AC_SUBST(LDFLAGS)
AC_SUBST(MULTI_OS_DIRECTORY)

dnl we really care wether swapcontext is defined or not.  The OVM just
dnl assmes that other functions exist, so checking for them here seems silly
AC_CHECK_FUNCS(swapcontext)

AC_CHECK_LIB(m, fmod)

AC_ARG_WITH(posix-rt-timers,AC_HELP_STRING([--with-posix-rt-timers],
[Use POSIX RT timers on any operating system.]))

dnl If running on Timesys Linux RT system we need to use the rk-rt library for
dnl the main POSIX clock and timer functionality. If we have librk-rt then we
dnl use POSIX timers, otherwise we use setitime. If librk doesn't exist we
dnl check for the usual librt for POSIX. We only use POSIX timers with Timesys
dnl by default because in normal Linux they don't work very well (prio to
dnl kernel 2.6) and they require linking with libpthread. Note that the Timesys
dnl librk-rt library must exist in ld's link-time path (either /usr/lib or 
dnl specified by LIBRARY_PATH in the environment.
AC_CHECK_LIB(rk-rt, clock_getres,[
   AC_DEFINE(USE_POSIX_RT_TIMER,1,[Specifies use of the POSIX RT Timers]) 
   LIBS="$LIBS -lrk-rt"
],[
  case $with_posix_rt_timers in
    yes|Yes|YES)
      AC_CHECK_LIB(rt, clock_getres,[
         AC_DEFINE(USE_POSIX_RT_TIMER,1,[Specifies use of the POSIX RT Timers])
	 LIBS="-lrt $LIBS"
      ],[
         AC_MSG_ERROR([POSIX RT Timers were specifically requested, but were not found.  To get Ovm to configure, remove the -with-posix-rt-timers option.])
      ])
      ;;
    no|No|NO|"")
      # pull in -lrt, but don't declare that it's there
      AC_CHECK_LIB(rt, clock_getres)
      ;;
    *)
      AC_MSG_ERROR([$with_posix_rt_timers is not a valid argument to -with-posix-rt-timers])
      ;;
  esac
])




AC_MSG_CHECKING(if asm symbols need extra underscore)
if AC_TRY_COMMAND([[ echo '\''float e(int x,int y) {}'\'' | '$CXX' -S -x c++ - -o - | grep -q '\''^__Z1eii:$'\'' ]]); then
 AC_DEFINE(ASM_NEEDS_UNDERSCORE, 1, [asm symbols are prefixed by one additional underscore])
 AC_MSG_RESULT(yes)
else
 AC_MSG_RESULT(no)
fi


case $target_os in
  darwin*)
        AC_DEFINE(OSX_BUILD, 1,
		 [set to true if we're building under OSX])
        dnl Declare BSD_SOURCE so that BSD specific functions are available
        CFLAGS="$CFLAGS -D_BSD_SOURCE=1"
	AC_CHECK_LIB(SystemStubs,fprintf$LDBLStub)
	;;
  solaris*)
        AC_DEFINE(SOLARIS_BUILD, 1,
		 [set to true if we're building under Solaris])
        dnl Declare BSD_SOURCE so that BSD specific functions are available
        CFLAGS="$CFLAGS -D_BSD_SOURCE=1"
	# order of check_libs is important
	AC_CHECK_LIB(uutil,uu_check_name)
	AC_CHECK_LIB(door,door_create)
	AC_CHECK_LIB(gen,bgets)
	AC_CHECK_LIB(scf,scf_simple_prop_get)
	LDFLAGS="$LDFLAGS -lrt -lsocket -lnsl -lmd5 -lresolv -laio -lmp" 
	;;
  netbsd*)
        AC_DEFINE(NETBSD_BUILD, 1,
		 [set to true if we're building under NetBSD])
        dnl Declare BSD_SOURCE so that BSD specific functions are available
        CFLAGS="$CFLAGS -D_BSD_SOURCE=1"
	;;
  linux*)
        AC_DEFINE(LINUX_BUILD, 1,
		 [set to true if we're building under Linux])
        dnl Declare BSD_SOURCE so that BSD specific functions are available
        dnl Restrict compilation to latest POSIX/SUS definitions, but allow
        dnl BSD for the WCOREDUMP feature
        CFLAGS="$CFLAGS -D_XOPEN_SOURCE=600 -D_BSD_SOURCE=1"      
	;;
  rtems4.8*)
	AC_DEFINE(RTEMS_BUILD,1,
		[set to true if we're building for RTEMS])
	RTEMS_BUILD=1
	
	if test "X$RTEMS" = X ; then
		AC_MSG_ERROR("RTEMS variable must be set to RTEMS build root when building for RTEMS.")
	fi

	if test "$target_cpu" = "sparc" ; then
		BSPCPU="leon3"
	elif test "$target_cpu" = "i386" ; then
		BSPCPU="pc586"
	else
		AC_MSG_ERROR("Only sparc-rtems4.8 and i386-rtems4.8 targets for RTEMS is presently supported.")
	fi

	RTEMS_SIMULATOR=${host_alias}-run
	CFLAGS="$CFLAGS -B$RTEMS/${host_alias}/$BSPCPU/lib -specs bsp_specs -qrtems -D_BSD_SOURCE=1 -D__BSD_VISIBLE=1"

	if test "$target_cpu" = "i386" ; then
		CFLAGS="$CFLAGS -Wl,-Ttext,0x00100000"
	fi

	LDFLAGS="$LDFLAGS \
		-L $RTEMS/${host_alias}/$BSPCPU/lib/no-barrier.rel \
	        $RTEMS/${host_alias}/$BSPCPU/lib/no-dpmem.rel \
        	$RTEMS/${host_alias}/$BSPCPU/lib/no-event.rel \
        	$RTEMS/${host_alias}/$BSPCPU/lib/no-msg.rel \
      		$RTEMS/${host_alias}/$BSPCPU/lib/no-mp.rel \
        	$RTEMS/${host_alias}/$BSPCPU/lib/no-part.rel \
        	$RTEMS/${host_alias}/$BSPCPU/lib/no-region.rel \
        	$RTEMS/${host_alias}/$BSPCPU/lib/no-ext.rel \
	" 
	# $RTEMS/sparc-rtems4.8/leon3/lib/no-timer.rel
	;;
  *)
        AC_MSG_ERROR("Target OS $target_os is not supported (yet).")
	;;
esac


dnl Turn on all main compiler warnings
CFLAGS="$CFLAGS -Wall"

if echo $CC $CFLAGS $LDFLAGS | grep -- -static > /dev/null; then
  STATIC_LINK=yes
 else
  STATIC_LINK=no
  case "$target_os,$OVM_ARCH" in
    linux*,i686)
      dnl don't let librt pull in pthread stuff if we don't need it
      AC_MSG_CHECKING(for broken linux pthreads)
      AC_RUN_IFELSE_CROSS(
        AC_LANG_SOURCE([[
#include <stdlib.h>
#include <pthread.h>

char stk[[12 * 1024]];

void go() {
  int tid = pthread_self();
  exit(0);
}

int main(int argc, char **argv) {
  char *base = stk + sizeof(stk) - 4;
  asm("movl %0, %%esp\n"
      "movl %0, %%ebp\n"
      "call go"
      :: "r"(base));
}
	  ]]), [
            AC_MSG_RESULT(no)
	    AC_DEFINE(HAVE_PTHREAD, 1, [true if pthreads are usable])
	    CFLAGS="$CFLAGS -D_REENTRANT"
	    CXXFLAGS="$CXXFLAGS -D_REENTRANT"
	    LIBS="$LIBS -lpthread"
          ], [
            AC_MSG_RESULT(yes)
            STATIC_LINK=yes
            LDFLAGS="$LDFLAGS -static"
	    AC_DEFINE(HAVE_PTHREAD, 0, [true if pthreads are usable])
          ])
      ;;
    *)
      AC_MSG_CHECKING(if we should use pthreads)
      dnl do not use pthreads on NetBSD
      case $target_os in
      netbsd*)
        AC_MSG_RESULT(on NetBSD no)
        AC_DEFINE(HAVE_PTHREAD, 0, [true if pthreads are usable])
        ;;
      rtems4.8*)
        AC_MSG_RESULT(on RTEMS no)
        AC_DEFINE(HAVE_PTHREAD, 0, [true if pthreads are usable])
        ;;

      *)
        AC_MSG_RESULT(yes by default)
        AC_DEFINE(HAVE_PTHREAD, 1, [true if pthreads are usable])
        CFLAGS="$CFLAGS -D_REENTRANT"
        CXXFLAGS="$CXXFLAGS -D_REENTRANT"
        LIBS="$LIBS -lpthread"
        ;;
      esac
      ;;
  esac

fi

AC_SUBST(STATIC_LINK)


AC_DEFUN(TRY_LINK_IMAGE, [
  AC_MSG_CHECKING(for $1 linker magic)

  echo "This is a test" > img

  cat <<EOF > conftest.c
#include <string.h>
char *img =  (char *) BOOTBASE;
char *heap = (char *) $3;

int main() {
  if (strcmp("This is a test\n", img))
    return 1;
  if (!heap)
    return 0;
  if (*heap)
    return 1;
  strcpy(heap, img);
  getpwuid(getuid());
  return strcmp(img, heap);
}
EOF

  cat <<EOF > conftest.mk
BOOTBASE=0x40000000
HEAPBASE=$3
HEAPSIZE=134217728
CC=$CC
CFLAGS=$CFLAGS
LDFLAGS=$LDFLAGS
OVM_ARCH=$OVM_ARCH
STATIC_LINK=$STATIC_LINK

all: conftest
	./conftest

include $srcdir/build/$2-image.mk

.s.o:
	\$(CC) \$(CFLAGS) -c \$< -o \[$]@

conftest: conftest.c \$(IMAGE_LINK_MAGIC_FILE)
	\$(CC) \$(CFLAGS) \$(LDFLAGS) -o conftest conftest.c \$(IMAGE_LINK_MAGIC_FILE)
	-rm \$(DRIVER_GENERATED)

EOF
  if AC_TRY_COMMAND([[$MAKE -f conftest.mk 2>&5 >&5]]); then
   AC_MSG_RESULT(found)
   LINK_IMAGE=$2
  else
   AC_MSG_RESULT(not found)
   $4
  fi])



AC_ARG_WITH(qemu,
	    [AC_HELP_STRING([--with-qemu],
			    [specify a user-level qemu emulator that will be used to run target code as needed])],
	    [QEMU="$with_qemu"], [])
AC_SUBST(QEMU)


AC_ARG_WITH(link-image,
	    AC_HELP_STRING([--with-link-image=PLATFORM],
		           [Force a plaform-specific strategy to link binary 
                            data into the Ovm executable.  Possible values
                            are elf, darwin, and no. If this option is not
                            provided, configure will select the appropriate 
                            strategy for this machine.]),
	    [], [with_link_image=yes])

if test "$cross_compiling" != yes ; then

case $with_link_image in
  yes)
  TRY_LINK_IMAGE(elf, elf, 0x0, TRY_LINK_IMAGE(darwin, darwin, 0x0, [
    LINK_IMAGE=unknown
    AC_MSG_WARN(OVM cannot generate standalone executeables.)
    AC_MSG_WARN()
    AC_MSG_WARN([[Virtual machines will be generated as two files, an]])
    AC_MSG_WARN(executable called ovm and a data file called img.  The)
    AC_MSG_WARN(virtual machine is launched by passing the path to)
    AC_MSG_WARN(the img file as the first argument to ovm.)
    AC_MSG_WARN()
    AC_MSG_WARN([[If you see this message under Darwin, or on an elf]])
    AC_MSG_WARN([[system with GNU ld, please report this as a bug to]])
    AC_MSG_WARN(ovm-admin@cs.purdue.edu.  If you see this message on an elf)
    AC_MSG_WARN([[system, try installing GNU ld and rerunning configure.]])
  ]));;
  no) LINK_IMAGE=unknown;;
  elf|darwin|unknown) LINK_IMAGE=$with_link_image;;
  *) 
  AC_MSG_ERROR(bad --with-link-image option: $with_link_image not 
               [elf, darwin, or no]);;
esac

else

case $with_link_image in
  yes)
    AC_MSG_WARN([[Cross compiling - Virtual machine will be]])
    AC_MSG_WARN([[generated as separate img and ovm files.]])
    AC_MSG_WARN([[Use --with-link-image to override]])
    LINK_IMAGE=unknown
  ;;
  no) LINK_IMAGE=unknown;;
  elf|darwin|unknown) LINK_IMAGE=$with_link_image;;
  *)
  AC_MSG_ERROR(bad --with-link-image option: $with_link_image not
               [elf, darwin, or no]);;   
esac

fi     

if test "$LINK_IMAGE" = "unknown"; then
  IMAGE_ARGUMENT=img
else
  IMAGE_ARGUMENT=""
fi

FIXED_HEAP=no
if test "$LINK_IMAGE" = "elf" ; then
  FIXED_HEAP=yes
  TRY_LINK_IMAGE([fixed heap], elf, 0x40004000, FIXED_HEAP=no)
fi
AC_SUBST(LINK_IMAGE)
AC_SUBST(IMAGE_ARGUMENT)
AC_SUBST(FIXED_HEAP)

dnl Even though the x86 shift instructions ignore high bits, I've seen
dnl shifts get compiled wrong with -O3.
AC_DEFINE(SHIFTS_NEED_MASK, 1, [true if shift exponents must be wrapped])

# Special check for OSX to avoid the default use of precompiled C++ headers
AC_CACHE_CHECK(whether ${CC-cc} accepts -no-cpp-precomp,
cv_prog_cc_darwin_cpp_precomp,
[echo 'void f(){}' > conftest.c
if test -z "`${CC-cc} -no-cpp-precomp -c conftest.c 2>&1`"; then
  cv_prog_cc_darwin_cpp_precomp=yes
else
  cv_prog_cc_darwin_cpp_precomp=no
fi
rm -f conftest*
])
if test $cv_prog_cc_darwin_cpp_precomp = yes; then
  CFLAGS="$CFLAGS -no-cpp-precomp"
fi

AC_MSG_CHECKING(if /proc/cpuinfo is available)
AC_RUN_IFELSE_CROSS(AC_LANG_SOURCE([[   
    #include <stdio.h>
    int main() {
        FILE* cpuinfo = fopen("/proc/cpuinfo", "r");
        if (!cpuinfo) {
            return 1;
        }
        fclose(cpuinfo);
        return 0;
    }
]]),[
    AC_MSG_RESULT(yes);
    AC_DEFINE([HAS_PROCCPUINFO],1,
              [Set if this OS had /proc/cpuinfo])
],[
    AC_MSG_RESULT(no);
],[
case $target_os in
  linux*)
    AC_MSG_WARN([[Cross-compiling for linux: assuming that /proc/cpuinfo is available]])
    AC_DEFINE([HAS_PROCCPUINFO],1,
              [Set if this OS had /proc/cpuinfo])
        ;;
       *)
    AC_MSG_WARN([[Cross-compiling for $target_os]])
    AC_MSG_ERROR([[don't know whether /proc/cpuinfo is available on that system]])
        ;;
esac
])


AC_LANG_PUSH(C++)
AC_MSG_CHECKING(if the sigaltstack is valid after a signal handler)
AC_RUN_IFELSE_CROSS(AC_LANG_SOURCE([[

// program fails (status 1) if the additional
// sigaltstack in the signal handler is NECESSARY

// program succeeds (status 0) if the additional
// sigaltstack is not required, the old is still valid

#include <assert.h>
#include <stdio.h>
#include <setjmp.h>
#include <string.h>
#include <signal.h>
#include <stdlib.h>
#include <stdarg.h>

#define PRECISE_RESERVED_SIGNAL SIGUSR1
#define ALTSIZE (MINSIGSTKSZ+0x2000)

static jmp_buf cont;
static stack_t altStack;

static void signalHandler(int arg) {

#if 0 // superfluous on linux, necessary on darwin,
      // on the other platforms who knows?
  if (sigaltstack(&altStack,0)<0) {
    perror("sigaltstack");
    abort();
  }
#endif
  siglongjmp(cont, 1);
}

static void rewind () __attribute__ ((noreturn));
static void rewind() {
  struct sigaltstack oss;
  struct sigaction oact;
  sigset_t set;
  sigset_t oset;

  if (sigaltstack(0, &oss)<0) {
    perror("sigaltstack");
    abort();
  }
  assert(!(oss.ss_flags & (SS_DISABLE|SS_ONSTACK)));
  if (sigaction(PRECISE_RESERVED_SIGNAL, 0, &oact) < 0) {
    perror("sigaction");
    abort();
  }
  assert(oact.sa_handler == signalHandler
	 && (oact.sa_flags & SA_ONSTACK));
  sigemptyset(&set);
  if (sigprocmask(SIG_UNBLOCK, &set, &oset) < 0) {
    perror("sigprocmask");
    abort();
  }
  if (sigismember(&oset, PRECISE_RESERVED_SIGNAL)) {
    puts("rewind: PRECISE_RESERVED_SIGNAL was blocked");
  }
  raise(PRECISE_RESERVED_SIGNAL);
  assert(!"continue after PRECISE_RESERVED_SIGNAL");
  abort();
}

void setupAltStack() {
  struct sigaction sa;
  
  // Create the new stack
  altStack.ss_flags = 0;
  altStack.ss_size = ALTSIZE;
  
  if (!(altStack.ss_sp=(char*)malloc(ALTSIZE))) {
    perror("Could not allocate signal handler stack");
    abort();
  }
  if (sigaltstack(&altStack,0)<0){
    perror("sigaltstack");
    abort();
  }
  
  // Set up the custom signal handler
  sa.sa_handler = &signalHandler;
  sa.sa_flags = SA_ONSTACK;
  sigemptyset( &sa.sa_mask );
  sigaction( PRECISE_RESERVED_SIGNAL, &sa, 0 );
}

main() {
  setupAltStack();
  if (!sigsetjmp(cont, 1)) {
    rewind();
  } else {
    // after siglongjump. Is the stack the old one or the new one now??
    // the man page for sigaltstack says:
    /*
     If oss is non-zero, the current signal stack state is returned.  The
     ss_flags field will contain the value SA_ONSTACK if the process is cur-
     rently on a signal stack and SA_DISABLE if the signal stack is currently
     disabled.
    */
    // Let's check.

    struct sigaltstack oss;
    if (sigaltstack(0, &oss)<0) {
      perror("sigaltstack");
      abort();
    }
    if (oss.ss_flags & SA_ONSTACK) {
      // printf("We are still on the signal stack!\n");
      return 1;
    } else {
      // printf("We are on the regular stack.\n");
      return 0;
    }
  }
}
]]),[
    AC_MSG_RESULT(yes);
],[
    AC_DEFINE([SIGALTSTACK_REQUIRED],1,
              [Set if the sigaltstack is no longer valid after a signal handler])
    AC_MSG_RESULT(no);
],[
case $target_os in
  linux*)
    AC_MSG_WARN([[Cross-compiling for linux: assuming sigaltstack is valid after a signal handler]])
        ;;
       *)
    AC_MSG_WARN([[Cross-compiling for $target_os]])
    AC_MSG_ERROR([[don't know if sigaltstack will be valid after a signal handler]]);
        ;;
esac
])
AC_LANG_POP(C++)


AC_MSG_CHECKING(if timezone is a global variable)
if AC_TRY_COMMAND([[ ( echo '\''#include <time.h>'\'' ; echo '\''long y=timezone;'\'' ) | '$CXX' -S -x c++ - -o - -pedantic-errors >/dev/null ]]); then
 AC_MSG_RESULT(yes)
 AC_DEFINE([TIMEZONE_IS_VAR],1,
           [timezone is a global var, rather than a function])
else
 AC_MSG_RESULT(no)
fi


AC_MSG_CHECKING(how to get file descriptor from FILE object)
AC_RUN_IFELSE_CROSS(AC_LANG_SOURCE([[
    #include <stdio.h>
    int main() {
	// this line is important - files get initialized, somehow
	printf("stdin %d, stdout %d, stderr %d\n", stdin->_file, stdout->_file, stderr->_file);
        if (stdin->_file == 0 &&
            stdout->_file == 1 &&
            stderr->_file == 2) {
            return 0;
        }
        return 1;
    }
]]),[
    AC_MSG_RESULT(use _file field directly)
    AC_DEFINE([FILE_FD_FIELD],_file,
              [The name of the field in the FILE structure that holds the file descriptor])
],[
    AC_RUN_IFELSE_CROSS(AC_LANG_SOURCE([[
        #include <stdio.h>
        int main() {
            if (stdin->_fileno == 0 &&
                stdout->_fileno == 1 &&
                stderr->_fileno == 2) {
                return 0;
            }
            return 1;
        }
    ]]),[
        AC_MSG_RESULT(use _fileno field directly)
        AC_DEFINE([FILE_FD_FIELD],_fileno,
                  [The name of the field in the FILE structure that holds the file descriptor])
    ],[
        AC_RUN_IFELSE_CROSS(AC_LANG_SOURCE([[
	        #include <stdio.h>
        	int main() {
            	if (stdin->_file == 0 &&
               	 stdout->_file == 1 &&
               	 stderr->_file == 2) {
                	return 0;
            	}
            	return 1;
        	}
    	]]),[
        	AC_MSG_RESULT(use _file field directly)
      		AC_DEFINE([FILE_FD_FIELD],_file,
                  [The name of the field in the FILE structure that holds the file descriptor])
    	],[
        	AC_MSG_ERROR(don't know how to get the file descriptor from the FILE object)
    	])

	],[
	case $target_os in
  	linux*)
    	AC_MSG_WARN([[Cross-compiling for linux: using _fileno for file access]])
    	AC_DEFINE([FILE_FD_FIELD],_fileno,
              [The name of the field in the FILE structure that holds the file descriptor])
        ;;
       	*)
    	AC_MSG_WARN([[Cross-compiling for $target_os: FIXME: FILE_FD_FIELD not set]])
    	AC_MSG_ERROR(don't know how to get the file descriptor from the FILE object)
        ;;
	esac
	])
])

AC_MSG_CHECKING([whether to enable RO])
AC_ARG_ENABLE(ro,
              [AC_HELP_STRING([--enable-ro],
			      [enable Runtime Optimizer so that Runabouts are statically converted into visitors and thus Runabouts will run at runtime])])

if test "$enable_ro" != ""
then
  AC_MSG_RESULT(yes)
  RO="true"
 else
  AC_MSG_RESULT(no)
  RO=
fi
AC_SUBST(RO)


AC_MSG_CHECKING([whether to enable debugging])
AC_ARG_ENABLE(debug,
[AC_HELP_STRING([--disable-debug],[Disable all debugging support])])

if test "$enable_debug" != "no"
then
  AC_MSG_RESULT(yes)
  AC_DEFINE_UNQUOTED(DEBUGGING, 1, [set to enable debugging])
  DEBUG="-g"
 else
  AC_MSG_RESULT(no)
  DEBUG=
fi
AC_SUBST(DEBUG)

AC_MSG_CHECKING([whether system calls known to cause static linking problems are disabled])
AC_ARG_ENABLE(dynamic-syscalls,
        [AC_HELP_STRING([--disable-dynamic-syscalls], 
                        [Disable the use of gethostbyaddr, gethostbyname and getpwuid, that cause static linking problems due to dynamic link attempts even when statically linked])])

if test "$enable_dynamic_syscalls" == "no"
then
   AC_MSG_RESULT(yes)
   AC_DEFINE(NO_GETHOST,, [define to elide gethostby* syscalls])
   AC_DEFINE(NO_USERID,, [define to elide getpwuid syscall])
else
   AC_MSG_RESULT(no)
fi

OPT=-O2
AC_SUBST(OPT)

INCS=""
AC_SUBST(INCS)

dnl strip out debugging and optimisation by default
CFLAGS=`echo "$CFLAGS" | sed -e 's/-g//' -e 's/-O.//'`

AC_MSG_CHECKING(for working C++ exceptions)
AC_LANG_PUSH(C++)
AC_COMPILE_IFELSE(
  AC_LANG_PROGRAM(
   [void die() { throw "I'm dead"; }],
   [
      try { die(); }
      catch (char *_) { return 0; }
      return 1;
    ]),
  [AC_MSG_RESULT(yes)],
  [AC_MSG_ERROR([C++ exceptions broken with linker flags $LDFLAGS])])
AC_LANG_POP(C++)

dnl not needed when classpath native stuff gone
if test $target_vendor = apple; then
dnl man ranlib contains the following helpful hint: "This option is
dnl included only because this was the original behavior of ranlib.  
dnl This option is not the default."
  RANLIB="$RANLIB -c"
fi

dnl Autconf actually works pretty hard to keep people from using prefix 
dnl in this way, but we do it anyway.
if test "x$prefix" = xNONE
then ovm_home=$ac_default_prefix/ovm
else ovm_home=$prefix/ovm
fi
AC_SUBST(ovm_home)


if test "$with_xenomai" = yes ; then

dnl Check for Xenomai support

if test "X$XENO" = X ; then
	XENO=/usr/xenomai
fi

XENOCONFIG=`PATH=$XENO:$XENO/bin:$PATH which xeno-config 2>/dev/null`

### Sanity check
if test "X$XENOCONFIG" = X ; then
	AC_MSG_ERROR("Cannot find xeno-config.")
fi

if test ! -x $XENOCONFIG ; then
	AC_MSG_ERROR("$XENOCONFIG is not executable.")
fi

CPPFLAGS="`$XENOCONFIG --xeno-cflags` -DOVM_XENOMAI $CPPFLAGS"
LDFLAGS="$LDFLAGS -L`$XENOCONFIG --libdir`"
LIBS="$LIBS -lnative -lrtdk"

AC_CHECK_HEADERS(native/task.h, [], [
	echo "Error! Cannot find Xenomai native API header file native/task.h."
	exit -1
])

AC_CHECK_LIB(native,rt_task_yield,[],[
	echo "Error! Cannot link test program with Xenomai native library."
	exit -1
])
fi #xenomai

if test "$with_xenomai" = no ; then
	if test "$with_interrupts" = yes ; then
		AC_MSG_ERROR([Interrupt support without Xenomai is not currently possible])
	fi
fi

if test "$with_interrupts" = yes ; then
	GEN_OVM_ARGUMENTS="$GEN_OVM_ARGUMENTS -interrupts=yes"
else
	GEN_OVM_ARGUMENTS="$GEN_OVM_ARGUMENTS -interrupts=no"
fi
AC_SUBST(GEN_OVM_ARGUMENTS)

dnl expand bin/gen-ovm.in to use the version of ovm sitting in the
dnl build directory 
OVM_JAR=`pwd`/src/ovm.jar
AC_SUBST(OVM_JAR)
STITCHER_PATH=`pwd`/config:`cd $srcdir/config; pwd`
AC_SUBST(STITCHER_PATH)
ABS_TOP_BUILDDIR=`pwd`
ABS_TOP_SRCDIR=`cd $srcdir; pwd`
ECLIPSE_PROJECT=`basename $ABS_TOP_SRCDIR`
AC_SUBST(ABS_TOP_BUILDDIR)
AC_SUBST(ABS_TOP_SRCDIR)
AC_SUBST(ECLIPSE_PROJECT)
AC_SUBST(RTEMS_SIMULATOR)
AC_SUBST(RTEMS_BUILD)
AC_SUBST(OVM_X86)
AC_SUBST(OVM_SPARC)
AC_SUBST(FORCE_IMAGE_LOCATION)

AC_CONFIG_FILES([
 bin/gen-ovm
 bin/ovm-config
 bin/record-eclipse-launch
 bin/Makefile
 config/paths
 config/Makefile
 build/Vars.mk
 build/Makefile
 doc/manual/Makefile
 Makefile
 src/Makefile
 src/apps/Makefile
 src/native/constgen/Makefile
 src/native/img2asm/Makefile
 src/native/common/Makefile
 src/native/common/include/jvm_constants/Makefile
 src/native/interpreter/Makefile
 src/native/simplejit/Makefile
 src/native/j2c/Makefile
 src/syslib/s3/Makefile
 src/syslib/user/Makefile
 src/syslib/user/ovm_platform/Makefile
 src/syslib/user/ovm_realtime/Makefile
 test/Makefile
])
AC_OUTPUT

AC_MSG_NOTICE(configuring libffi)
mkdir -p libffi/libffi

case "$ac_confdir" in
  .)  libffidir=".";;
  .*) libffidir="../../$ac_confdir/libffi/libffi";;
  *)  libffidir="$ac_confdir/libffi/libffi";;
esac    

(cd libffi/libffi;
 if test "$NEED_M32" = yes; then
   export CC="$CC -m32"
 fi;
 $SHELL $libffidir/configure --prefix=$ovm_home		\
		      --disable-multilib		\
		      --disable-shared			\
 		      --with-target-subdir=$libffidir	\
	      	      --disable-softfloat		\
		      --host=${host_alias}		\
		      --build=$build			)

AC_MSG_NOTICE(configuring classpath)
dnl Generate .java files, and assemble .resource files in the
dnl directory where we will create ovm_rt_user.jar.
cpdst=src/syslib/user/gnu-classpath
case "$ac_confdir" in
  .)  cpsrc="../../../../gnu-classpath";;
  .*) cpsrc="../../../../$ac_confdir/gnu-classpath";;
  *)  cpsrc="$ac_confdir/gnu-classpath";;
esac    

mkdir -p $cpdst

dnl Not sure about --disable-gtk-peer.  You need it if gtk is not
dnl installed (ie, on most Macs).  I guess we will not need to turn it
dnl off until we support dynamic loading.
(cd $cpdst;
 $SHELL $cpsrc/configure --prefix=`pwd` --disable-gtk-peer \
 			 --with-kjc=$JAVAC		   \
 			 --disable-load-library 	   \
			 --host=${host_alias}	           )
(cd $cpdst/lib; make -w resources)
