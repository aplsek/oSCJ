/*
 * Generated by org.objectweb.hulotte.extensions.javaRTSJ.generators.HulotteImmortalInstanciationForScopesGenerator on: 
 */
import javax.realtime.LTMemory;
import javax.realtime.ImmortalMemory;
import javax.realtime.ScopedMemory;;

public class ImmortalInstanciationWrapperForScopes
implements java.lang.Runnable {

  private String scopeName;
  private long size;
  private ScopedMemory scope;
  public ScopedMemory getScopeRef()  {
    return scope;
  }

  public void setScopeName(String scopeName)  {
    this.scopeName = scopeName;
  }

  public void setScopeSize(long size)  {
    this.size = size;
  }

  final LTMemory scopedA = new LTMemory(8 * 1024);
  private Runnable runTh = new Runnable() {
  public void run() {
    //System.out.println("Mem Consumed " + scopedA.memoryConsumed());
    System.out.println("immortal memory consumed "+ ImmortalMemory.instance().memoryConsumed());
  }
}
;
  private void memConsumed()  {
scopedA.enter(runTh);
  }

  public void run()  {
        memConsumed();
        if (scopeName.equals("LTMemory")) {
          scope = new LTMemory(size);
        }
        memConsumed();
  }

}
