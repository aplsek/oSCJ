/*
 * Generated by org.objectweb.hulotte.extensions.javaRTSJ.generators.BasicCrossScopeInterceptorGen.
 */

package hulotte.generated;

import org.objectweb.fractal.fraclet.annotations.Component;
import org.objectweb.fractal.fraclet.annotations.Interface;
import org.objectweb.fractal.fraclet.annotations.Requires;
import org.objectweb.fractal.fraclet.annotations.Attribute;
import org.objectweb.fractal.fraclet.annotations.Lifecycle;
import org.objectweb.fractal.api.control.BindingController;
import org.objectweb.fractal.api.NoSuchInterfaceException;
import java.util.List;
import java.util.ArrayList;
import javax.realtime.MemoryArea;

@Component(name = "CrossScopeBindingInterceptor__TransientDetector_iTdToIe__ImmortalEntry_iTdToIe",
provides = {
@Interface(name = "IN", signature = comp.cdx.ITransDetectToImmEntry.class),
@Interface(name = "MemoryAreaSetter", signature = rtsj.memory.api.SetMemoryAreaReferenceItf.class)})

public class GenJavaContent_CrossScopeBindingInterceptor__TransientDetector_iTdToIe__ImmortalEntry_iTdToIe_11fab1b8
implements BindingController,comp.cdx.ITransDetectToImmEntry,rtsj.memory.api.SetMemoryAreaReferenceItf {


	@Requires(name="OUT")
	private comp.cdx.ITransDetectToImmEntry __OUT;

	// Implementation of the BindingController interfaces.
	public String[] listFc() {
		List<java.lang.String>  __itfs__ = new ArrayList<java.lang.String> ();
		listFc(__itfs__);
		return __itfs__.toArray(new String[__itfs__.size()]);
	}

	protected void listFc(List<java.lang.String>  set) {
		if ((this.__OUT) != null)
			set.add("OUT");
	}

	public Object lookupFc(String id) throws NoSuchInterfaceException {
		if (id.equals("OUT"))
			return this.__OUT;
		throw new NoSuchInterfaceException((("Client interface \'" + id) + "\' is undefined."));
	}

	public void bindFc(String id, Object ref) throws NoSuchInterfaceException {
		if (id.equals("OUT")) {
			this.__OUT = ((comp.cdx.ITransDetectToImmEntry)(ref));
			return;
		}
		throw new NoSuchInterfaceException((("Client interface \'" + id) + "\' is undefined."));
	}
	public void unbindFc(String id) throws NoSuchInterfaceException {
		if (id.equals("OUT")) {
			this.__OUT = null;
			return;
		}
		throw new NoSuchInterfaceException((("Client interface \'" + id) + "\' is undefined."));
	}
  public cdx.RawFrame getFrame()  {
		destinationMemoryAreaReference.enter(getFrameRunnableInstance);
		return getFrameRunnableInstance.result;
  }

  public void incrementFrameNotReadyCount()  {
		destinationMemoryAreaReference.enter(incrementFrameNotReadyCountRunnableInstance);
  }

  public void incrementFramesProcessed()  {
		destinationMemoryAreaReference.enter(incrementFramesProcessedRunnableInstance);
  }

  public void setNumberOfCollisions(int numberOfCollisions)  {
		setNumberOfCollisionsRunnable setNumberOfCollisionsRunnableInstance = new setNumberOfCollisionsRunnable(numberOfCollisions);
		MemoryArea.getMemoryArea(__OUT).executeInArea(setNumberOfCollisionsRunnableInstance);
  }

  public void setSuspectedSize(int suspectedSize)  {
		setSuspectedSizeRunnable setSuspectedSizeRunnableInstance = new setSuspectedSizeRunnable(suspectedSize);
		MemoryArea.getMemoryArea(__OUT).executeInArea(setSuspectedSizeRunnableInstance);
  }

  public javax.realtime.MemoryArea getMemoryAreaReference()  {
		return destinationMemoryAreaReference;
  }

  public void setMemoryAreaReference(javax.realtime.MemoryArea memoryArea)  {
		this.destinationMemoryAreaReference = memoryArea;
  }

  private MemoryArea destinationMemoryAreaReference;

private class getFrameRunnable
implements Runnable {

  public cdx.RawFrame result;
  public getFrameRunnable()  {
  }

  public void run()  {
		this.result = __OUT.getFrame();
  }

}
  public getFrameRunnable getFrameRunnableInstance = new getFrameRunnable();

private class incrementFrameNotReadyCountRunnable
implements Runnable {

  public incrementFrameNotReadyCountRunnable()  {
  }

  public void run()  {
		__OUT.incrementFrameNotReadyCount();
  }

}
  public incrementFrameNotReadyCountRunnable incrementFrameNotReadyCountRunnableInstance = new incrementFrameNotReadyCountRunnable();

private class incrementFramesProcessedRunnable
implements Runnable {

  public incrementFramesProcessedRunnable()  {
  }

  public void run()  {
		__OUT.incrementFramesProcessed();
  }

}
  public incrementFramesProcessedRunnable incrementFramesProcessedRunnableInstance = new incrementFramesProcessedRunnable();

private class setNumberOfCollisionsRunnable
implements Runnable {

  public int numberOfCollisions;
  public setNumberOfCollisionsRunnable(final int numberOfCollisions)  {
		this.numberOfCollisions = numberOfCollisions;
  }

  public setNumberOfCollisionsRunnable()  {
  }

  public void run()  {
		__OUT.setNumberOfCollisions(numberOfCollisions);
  }

}

private class setSuspectedSizeRunnable
implements Runnable {

  public int suspectedSize;
  public setSuspectedSizeRunnable(final int suspectedSize)  {
		this.suspectedSize = suspectedSize;
  }

  public setSuspectedSizeRunnable()  {
  }

  public void run()  {
		__OUT.setSuspectedSize(suspectedSize);
  }

}
}
