/*
 * Generated by org.objectweb.hulotte.extensions.javaRTSJ.generators.BasicCrossScopeInterceptorGen.
 */

package hulotte.generated;

import org.objectweb.fractal.fraclet.annotations.Component;
import org.objectweb.fractal.fraclet.annotations.Interface;
import org.objectweb.fractal.fraclet.annotations.Requires;
import org.objectweb.fractal.fraclet.annotations.Attribute;
import org.objectweb.fractal.fraclet.annotations.Lifecycle;
import org.objectweb.fractal.api.control.BindingController;
import org.objectweb.fractal.api.NoSuchInterfaceException;
import java.util.List;
import java.util.ArrayList;
import javax.realtime.MemoryArea;

@Component(name = "CrossScopeBindingInterceptor__CollisionDetector_iCdToIe__ImmortalEntry_iCdToIe",
provides = {
@Interface(name = "IN", signature = comp.cdx.ICollDetectToImmEntry.class),
@Interface(name = "MemoryAreaSetter", signature = rtsj.memory.api.SetMemoryAreaReferenceItf.class)})

public class GenJavaContent_CrossScopeBindingInterceptor__CollisionDetector_iCdToIe__ImmortalEntry_iCdToIe_b80a7670
implements BindingController,comp.cdx.ICollDetectToImmEntry,rtsj.memory.api.SetMemoryAreaReferenceItf {


	@Requires(name="OUT")
	private comp.cdx.ICollDetectToImmEntry __OUT;

	// Implementation of the BindingController interfaces.
	public String[] listFc() {
		List<java.lang.String>  __itfs__ = new ArrayList<java.lang.String> ();
		listFc(__itfs__);
		return __itfs__.toArray(new String[__itfs__.size()]);
	}

	protected void listFc(List<java.lang.String>  set) {
		if ((this.__OUT) != null)
			set.add("OUT");
	}

	public Object lookupFc(String id) throws NoSuchInterfaceException {
		if (id.equals("OUT"))
			return this.__OUT;
		throw new NoSuchInterfaceException((("Client interface \'" + id) + "\' is undefined."));
	}

	public void bindFc(String id, Object ref) throws NoSuchInterfaceException {
		if (id.equals("OUT")) {
			this.__OUT = ((comp.cdx.ICollDetectToImmEntry)(ref));
			return;
		}
		throw new NoSuchInterfaceException((("Client interface \'" + id) + "\' is undefined."));
	}
	public void unbindFc(String id) throws NoSuchInterfaceException {
		if (id.equals("OUT")) {
			this.__OUT = null;
			return;
		}
		throw new NoSuchInterfaceException((("Client interface \'" + id) + "\' is undefined."));
	}
  public void afterRun(long timeBefore,long timeAfter)  {
		afterRunRunnable afterRunRunnableInstance = new afterRunRunnable(timeBefore, timeAfter);
		MemoryArea.getMemoryArea(__OUT).executeInArea(afterRunRunnableInstance);
  }

  public void beforeRun(long time,boolean reportedMiss)  {
		beforeRunRunnable beforeRunRunnableInstance = new beforeRunRunnable(time, reportedMiss);
		MemoryArea.getMemoryArea(__OUT).executeInArea(beforeRunRunnableInstance);
  }

  public javax.realtime.MemoryArea getMemoryAreaReference()  {
		return destinationMemoryAreaReference;
  }

  public void setMemoryAreaReference(javax.realtime.MemoryArea memoryArea)  {
		this.destinationMemoryAreaReference = memoryArea;
  }

  private MemoryArea destinationMemoryAreaReference;

private class afterRunRunnable
implements Runnable {

  public long timeBefore;
  public long timeAfter;
  public afterRunRunnable(final long timeBefore,final long timeAfter)  {
		this.timeBefore = timeBefore;
		this.timeAfter = timeAfter;
  }

  public afterRunRunnable()  {
  }

  public void run()  {
		__OUT.afterRun(timeBefore, timeAfter);
  }

}

private class beforeRunRunnable
implements Runnable {

  public long time;
  public boolean reportedMiss;
  public beforeRunRunnable(final long time,final boolean reportedMiss)  {
		this.time = time;
		this.reportedMiss = reportedMiss;
  }

  public beforeRunRunnable()  {
  }

  public void run()  {
		__OUT.beforeRun(time, reportedMiss);
  }

}
}
