/*
 * Generated by org.objectweb.hulotte.extensions.javaRTSJ.generators.BasicCrossScopeInterceptorGen.
 */

package hulotte.generated;

import org.objectweb.fractal.fraclet.annotations.Component;
import org.objectweb.fractal.fraclet.annotations.Interface;
import org.objectweb.fractal.fraclet.annotations.Requires;
import org.objectweb.fractal.fraclet.annotations.Attribute;
import org.objectweb.fractal.fraclet.annotations.Lifecycle;
import org.objectweb.fractal.api.control.BindingController;
import org.objectweb.fractal.api.NoSuchInterfaceException;
import java.util.List;
import java.util.ArrayList;
import javax.realtime.MemoryArea;

@Component(name = "CrossScopeBindingInterceptor__TransientDetector_iStateTable__StateTable_iStateTable",
provides = {
@Interface(name = "IN", signature = cdx.IStateTable.class),
@Interface(name = "MemoryAreaSetter", signature = rtsj.memory.api.SetMemoryAreaReferenceItf.class)})

public class GenJavaContent_CrossScopeBindingInterceptor__TransientDetector_iStateTable__StateTable_iStateTable_60b2947c
implements BindingController,cdx.IStateTable,rtsj.memory.api.SetMemoryAreaReferenceItf {


	@Requires(name="OUT")
	private cdx.IStateTable __OUT;

	// Implementation of the BindingController interfaces.
	public String[] listFc() {
		List<java.lang.String>  __itfs__ = new ArrayList<java.lang.String> ();
		listFc(__itfs__);
		return __itfs__.toArray(new String[__itfs__.size()]);
	}

	protected void listFc(List<java.lang.String>  set) {
		if ((this.__OUT) != null)
			set.add("OUT");
	}

	public Object lookupFc(String id) throws NoSuchInterfaceException {
		if (id.equals("OUT"))
			return this.__OUT;
		throw new NoSuchInterfaceException((("Client interface \'" + id) + "\' is undefined."));
	}

	public void bindFc(String id, Object ref) throws NoSuchInterfaceException {
		if (id.equals("OUT")) {
			this.__OUT = ((cdx.IStateTable)(ref));
			return;
		}
		throw new NoSuchInterfaceException((("Client interface \'" + id) + "\' is undefined."));
	}
	public void unbindFc(String id) throws NoSuchInterfaceException {
		if (id.equals("OUT")) {
			this.__OUT = null;
			return;
		}
		throw new NoSuchInterfaceException((("Client interface \'" + id) + "\' is undefined."));
	}
  public statetable.Vector3d get(cdx.CallSign callsign)  {
		getRunnable getRunnableInstance = new getRunnable(callsign);
		MemoryArea.getMemoryArea(__OUT).executeInArea(getRunnableInstance);
		return getRunnableInstance.result;
  }

  public void put(cdx.CallSign callsign,float x,float y,float z)  {
		putRunnable putRunnableInstance = new putRunnable(callsign, x, y, z);
		MemoryArea.getMemoryArea(__OUT).executeInArea(putRunnableInstance);
  }

  public javax.realtime.MemoryArea getMemoryAreaReference()  {
		return destinationMemoryAreaReference;
  }

  public void setMemoryAreaReference(javax.realtime.MemoryArea memoryArea)  {
		this.destinationMemoryAreaReference = memoryArea;
  }

  private MemoryArea destinationMemoryAreaReference;

private class getRunnable
implements Runnable {

  public cdx.CallSign callsign;
  public statetable.Vector3d result;
  public getRunnable(final cdx.CallSign callsign)  {
		this.callsign = callsign;
  }

  public getRunnable()  {
  }

  public void run()  {
		this.result = __OUT.get(callsign.clone());
  }

}

private class putRunnable
implements Runnable {

  public cdx.CallSign callsign;
  public float x;
  public float y;
  public float z;
  public putRunnable(final cdx.CallSign callsign,final float x,final float y,final float z)  {
		this.callsign = callsign;
		this.x = x;
		this.y = y;
		this.z = z;
  }

  public putRunnable()  {
  }

  public void run()  {
		__OUT.put(callsign.clone(), x, y, z);
  }

}
}
