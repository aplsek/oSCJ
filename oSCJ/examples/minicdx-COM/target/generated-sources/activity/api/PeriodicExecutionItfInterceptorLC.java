/*
 * Generated by: org.objectweb.fractal.juliac.proxy.InterceptorClassGenerator
 * on: Tue Nov 23 15:17:22 CET 2010
 */

package activity.api;


public class PeriodicExecutionItfInterceptorLC
implements activity.api.PeriodicExecutionItf,org.objectweb.fractal.julia.Interceptor {

  private activity.api.PeriodicExecutionItf _impl;
  private org.objectweb.fractal.koch.factory.MPrimitiveImpl _lc;
  public PeriodicExecutionItfInterceptorLC()  {
  }

  public PeriodicExecutionItfInterceptorLC(Object obj)  {
    setFcItfDelegate(obj);
  }

  public void initFcController(org.objectweb.fractal.julia.InitializationContext ic) throws org.objectweb.fractal.api.factory.InstantiationException  {
    Object olc = ic.getInterface("lifecycle-controller");
    if( ! (olc instanceof org.objectweb.fractal.koch.factory.MPrimitiveImpl) ) {
      while( olc instanceof org.objectweb.fractal.julia.Interceptor ) {
        olc = ((org.objectweb.fractal.julia.Interceptor)olc).getFcItfDelegate();
      }
    }
    _lc = (org.objectweb.fractal.koch.factory.MPrimitiveImpl) olc;
  }

  public Object clone()  {
    PeriodicExecutionItfInterceptorLC clone = new PeriodicExecutionItfInterceptorLC(getFcItfDelegate());
    clone._lc = _lc;
    return clone;
  }

  public Object getFcItfDelegate()  {
    return _impl;
  }

  public void setFcItfDelegate(Object obj)  {
    _impl = (activity.api.PeriodicExecutionItf)obj;
  }

  public void startPeriodicComponent()  {
      synchronized(_lc) {
        if(_lc.fcState != 2)
          _lc.incrementFcInvocationCounter();
        else
          _lc.fcInvocationCounter++;
      }
      try {
    _impl.startPeriodicComponent();
      }
      finally {
        synchronized(_lc) {
          if(_lc.fcState != 2)
            _lc.decrementFcInvocationCounter();
          else
            _lc.fcInvocationCounter--;
        }
      }
  }

  public void stopPeriodicComponent()  {
      synchronized(_lc) {
        if(_lc.fcState != 2)
          _lc.incrementFcInvocationCounter();
        else
          _lc.fcInvocationCounter++;
      }
      try {
    _impl.stopPeriodicComponent();
      }
      finally {
        synchronized(_lc) {
          if(_lc.fcState != 2)
            _lc.decrementFcInvocationCounter();
          else
            _lc.fcInvocationCounter--;
        }
      }
  }

}
