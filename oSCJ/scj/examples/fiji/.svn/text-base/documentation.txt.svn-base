

Fiji on board - attempt 2

setup ...
Current thread is Thread[Thread-3,65537,main]
[javax.realtime.ImmortalMemory@1004d4c5] ScopedMemory.enter()
         - Attempt to enter memory area javax.safetycritical.MissionMemory@10050025
Unexpected trap ( 9) at address 0x400402F4
Unexpected trap (0x 9) at address XXX

Exception: for x86 also:

Exception thrown by runDetectorInScope: null
java.lang.ArrayIndexOutOfBoundsException
   at java.lang.FCThrowable.fillInStackTrace(FCThrowable.java:36)
   at java.lang.Throwable.fillInStackTrace(Throwable.java:498)
   at java.lang.Throwable.<init>(Throwable.java:159)
   at java.lang.Throwable.<init>(Throwable.java:147)
   at java.lang.Exception.<init>(Exception.java:46)
   at java.lang.RuntimeException.<init>(RuntimeException.java:49)
   at java.lang.IndexOutOfBoundsException.<init>(IndexOutOfBoundsException.java:46)
   at java.lang.ArrayIndexOutOfBoundsException.<init>(ArrayIndexOutOfBoundsException.java:45)
   at com.fiji.fivm.r1.fivmRuntime.throwArrayBoundsRTE(fivmRuntime.java:526)
   at cdx.CollisionDetectorHandler.handleEvent(CollisionDetectorHandler.java:96)
   at javax.safetycritical.CyclicExecutive$Wrapper.run(CyclicExecutive.java:128)
   at edu.purdue.scj.VMSupport.fivmr_MemoryArea_doRun(VMSupport.java:210)
   at edu.purdue.scj.VMSupport.fivmr_MemoryArea_doRun(VMSupport.java)
   at edu.purdue.scj.VMSupport.fivmr_MemoryArea_enter(Native Method)
   at edu.purdue.scj.VMSupport.enter(VMSupport.java:41)
   at javax.realtime.MemoryArea.enterImpl(MemoryArea.java:152)
   at javax.realtime.ScopedMemory.enter(ScopedMemory.java:73)
   at javax.safetycritical.PrivateMemory.enter(PrivateMemory.java:84)
   at javax.safetycritical.CyclicExecutive$Wrapper.runInItsInitArea(CyclicExecutive.java:121)
   at javax.safetycritical.CyclicExecutive.exec(CyclicExecutive.java:81)
   at javax.safetycritical.Mission.run(Mission.java:85)
   at javax.safetycritical.MissionSequencer$MissionWrapper.run(MissionSequencer.java:48)
   at edu.purdue.scj.VMSupport.fivmr_MemoryArea_doRun(VMSupport.java:210)
   at edu.purdue.scj.VMSupport.fivmr_MemoryArea_doRun(VMSupport.java)
   at edu.purdue.scj.VMSupport.fivmr_MemoryArea_enter(Native Method)
   at edu.purdue.scj.VMSupport.enter(VMSupport.java:41)
   at javax.realtime.MemoryArea.enterImpl(MemoryArea.java:152)
   at javax.realtime.ScopedMemory.enter(ScopedMemory.java:73)
   at javax.safetycritical.MissionMemory.enter(MissionMemory.java:57)
   at javax.safetycritical.MissionSequencer.handleAsyncEvent(MissionSequencer.java:74)
   at javax.safetycritical.MissionSequencer.start(MissionSequencer.java:64)
   at com.fiji.fivm.SCJMain.run(<source filename unavailable>)
   at java.lang.VMThread.fivmr_VMThread_run(VMThread.java:52)
   at java.lang.VMThread.fivmr_VMThread_run(VMThread.java)
[javax.safetycritical.MissionMemory@eda64c25] ScopedMemory.enter()
	 - Attempt to enter memory area javax.safetycritical.PrivateMemory@eda4603b



------------------------------

LEAK:

Update on x86
helloworld ok

cdx
	- for 100 frmyhames ok
	- fro 500 frames out-of-memory error:
	
	Detector: detector priority is 9
Detector: detector period is 50
Exception in thread "Thread-2" java.lang.OutOfMemoryError: Could not complete allocation request due to a lack of available memory.  Stack trace is omitted either because there isn't enough memory to allocate it, or because this isn't the first OutOfMemoryError.
   <<No stacktrace available>>
   
Trying the parameter:
--g-def-max-mem=50M 
--g-def-max-mem=10M
--> no progress so far, still the same 



FIVMR_GC_MAX_MEM=300m <fiji executable> (sets the max heap so that you don't have to recompile)
--> what does this mean?


Fiji-CDx:
mission memory consumption:

mem:240804
mem:244660
mem:244684
mem:244708
mem:244732
mem:244756
mem:244780
mem:244804
mem:244828

---> 

------------------------





my hello at LEON 3: 

resuming at 0x40000000
[SCJ] RealtimeThread.start() - enter
[SCJ] RealtimeThread.start() - end
setup ...
Current thread is Thread[Thread-3,65537,main]
[javax.realtime.ImmortalMemory@1004d4c5] ScopedMemory.enter()
         - Attempt to enter memory area javax.safetycritical.MissionMemory@10050025
Unexpected trap ( 9) at address 0x400402F4
Unexpected trap (0x 9) at address XXX





--------




@SCJMissionInitializationOnly

javax.safetycritical.PeriodicEventHandler.java:    
javax.safetycritical.ManagedEventHandler.java:     
javax.safetycritical.AperiodicEventHandler.java		
javax.safetycritical.ManagedEventHandler


@SCJMissionCleanupOnly
javax.safetycritical.ManagedEventHandler




-----

Fiji VM install

Filip comments on Fiji/RTEMS:
"First a general comment: I'm assuming you're trying to test stuff on LEON boards.  This may or may not be a fun thing to do, but it's not the \"accepted\" way of testing RTEMS code.  And I'm not talking about Fiji in particular; I'm talking about all RTEMS development.  The accepted thing is to target ERC32/SIS and use the SIS simulator (invoked using sparc-rtems4.9-run or sparc-rtems4.9-gdb, depending on whether or not you want to do debugging).  With Ovm this might not work, since Ovm is probably too big to fit on ERC32.""Another accepted way of testing RTEMS is to target pc386 or pc486 (I believe Fiji might require pc486 these days, though that is a bug) and test with qemu.  I'm actually doing that right now - it works quite nicely.  You'll get better performance and more features, so you can test much more stuff.""In short, stay away from the LEON3 board for testing.  Use it only for benchmarking."



- compiling 
 ./configure --with-targets="i686-pc-linux-gnu" --with-rtems=/opt/rtems-4.9 --with-rtems-bsp=leon3
--->OK

./configure --with-targets="i686-pc-linux-gnu sparc-rtems4.9" --with-rtems=/opt/rtems-4.9 --with-rtems-bsp=leon3
--> with error in hello-script test but that will be there allways
--> now should be fixed

FLOATING POINT UNIT!!!!!:::

in FIJI :
lib/targets/sparc-rtems4.9/fivmcrc:
set these lines to:
--sys-arch-cflags	" -m32 -msoft-float -mcpu=v8"
--sys-ldflags		"-B/opt/rtems-4.9/sparc-rtems4.9/leon3/lib -specs bsp_specs -qrtems    -m32 -msoft-float"

---> thiw should be also fixed b FijiVM, default is "no fpu"





-----------------


PLDI Paper Guides & Info
========================

ALWAYS DO WRITE MANUALS WHAT WHEN & HOW I DID. IT SAVES TIME ON AT LARGE!

I. New Fiji Installation (x86_64 target)

    !!! Fiji must be in path without any spaces !!! 

    - download it from repository:
   
      > hg clone ssh://pmaj@zed.cs.purdue.edu//p/sss/fivmhg/fivm

    - set PATH to point to Sun's java:
   
      > export PATH=/opt/jdk1.6.0_16/bin:$PATH

    - run:
   
      > autoreconf -i
      > ./configure
     
    - build it with:
   
      > make
     
      If it throws an error here, check that fivm is on path without any spaces

II. Old Fiji Installation (x86_64 target)

    - screw old Fiji, just don't use -G hf

III. New Fragger and JNI

    - javah generates the header file
    - be sure to allocate & deallocate your own copies of the java objects, code example is on wikipedia
    - native code from java is easy (public native)
    - this is how you compile the shared library for Java (x86_64)

      > cc -shared -o libfragger.so Main.c -I/jdk/include -Ijdk/include/linux -O2 -fno-strict-aliasing -fPIC

      for some reason fiji requires 32bit version of the shared library, so you must do the following:

      > cc -m32 -shared -o libfragger.so Main.c -Ijdk/include -Ijdk/include/linux -O2 -fno-strict-aliasing

      where in both cases the jdk points to the JDK installation, in my case it is /opt/jdk1... for x86_64 and      /opt/jdk32 for 32bit.

    - now just run the Java thing and it works ok...

IV. Augment RTEMS so that I can output the task IDs for the rapita box benchmarking.

    - this turned out to be very easy, just follow the user extensions documentation in the RTEMS C programmer     manual. A simple example is in the ctxsw project.

V. Update FIVM and build it for RTEMS on LEON3.

    - in Fiji directory do the hg update:

    > hg pull
    > hg up

    - configure for RTEMS using:

    ./configure --target=sparc-rtems4.9 --with-rtems=/opt/rtems-4.9 --with-rtems-bsp=leon3

    - it is better to enable both RTEMS and x86_64 by invoking:

    ./configure --with-targets="x64_64-unknown-linux-gnu sparc-rtems4.9" --with-rtems=/opt/rtems-4.9 --with-rtems-bsp=leon3

 	./configure --with-targets="i686-pc-linux-gnu sparc-rtems4.9" --with-rtems=/opt/rtems-4.9 --with-rtems-bsp=leon3
	 	./configure --with-targets="i686-pc-linux-gnu" --with-rtems=/opt/rtems-4.9 --with-rtems-bsp=leon3

	
    (for me it was not working, it complained about ecj not containing Java. rm -r fivm and hg clone solved the problem).

    !! it appears that Fiji won't compile for RTEMScd. Filip told me that I should compile with --no-sigquit-debug parameter. It works now.





VI. Filip's Fiji Instrumentation

    - this is actually quite easy, see the file gcslowtiming.h in the same directory. Once you finish the header file you must compile your code with --internal-inst instrumentation.h, where instrumentation.h is the name of your header file.

VII. Rapita measurements

    I am getting best results if I measure with sample rate 50Mhz and oversample 2. It also seems to me that 20Mhz and 4x oversample should work (possibly even better) for the 40Mhz sparc.

    There seems to be no way of setting other sampling rates than the predefined ones. Even in windows.

VIII. How to set up a cvs repo:

    Go to zed and /p/sss/cvs and mkdir new directory.

    Then you have to checkout it and set up the CVSROOT and checkout what you need:
    
    > export CVS_RSH=ssh
    > export CVSROOT=:ext:pmaj@zed.cs.purdue.edu:/p/sss/cvs
    > cvs checkout xyz
    > cd xyz

    Then make changes. Once done, you have to add the files with the "cvs add" command. Then it's

    > cvs update
    > cvs commit

    To commit to the repo. If you are not happy with the default editor, change the EDITOR env variable to for instance "mc -e".

IX. Fiji RuntimeJ instrumentations:

    They are usually located in runtimej/src/com/fiji/fivm/...

    If you want to build with them, use the following when compiling java:

    > /opt/jdk32/bin/javac heap/Main.java -classpath "./:../fivm/runtimej/build"

    e.g. set the classpath appropriately.








   
SCJ requirements on Fiji
----------------------------------------------------------------------

- Fiji should start direclty the main in Immortal 
      - should do setImmortal 

- SCJ main method should run in Immortal memory
then we can run directly: 



safelet.setup();
MissionSequencer sequencer = safelet.getSequencer();
sequencer.start();

but ERROR:
   constructor of the Safelet 
      - assumes also that we are in the RealtimeThread




--------------------------------




Appendix A: Useful FIJI commands

    --max-threads=10
    --g-def-max-mem=10M
    --no-opt (never use this, only affects inlining of methods)
    --more-opt (the same, only affects inlining of methods)
    -G none (turns off the GC)
    -G hf (new compacting garbage collector)
    --noisy-method "Ljavanotation" (enables very verbose output when the particular method is compiled, uses the Java L notation)

Appendix B: Mercurial

    -update:
    
    > hg pull
    > hg up

    

Appendix C: Other useful hints

    FIVMR_LOG_GC=true <fiji program to run> (enables GC output messages, quite cool actually)
    FIVMR_GC_MAX_MEM=300m <fiji executable> (sets the max heap so that you don't have to recompile)




NOTES:

    Jan says about abstract: No references, no abbreviations and no obfuscated product names. KISS
    





-- 