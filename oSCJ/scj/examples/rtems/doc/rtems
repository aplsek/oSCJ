

Attaching minicom directly to serial port emulated by TSIM
----------------------------------------------------------
(on Linux)

(1) run tsim with "-uart1 " option

 /opt/tsim-eval/tsim/linux/tsim-leon3 -uart1 /dev/ptmx ttest.exe 

- watch for tsim output, it tells where to connect with minicom

serial port A on /dev/ptmx
Use '/dev/pts/13' as pseudo terminal slave for serial port A

(2) run minicom

 minicom -p /dev/pts/15 -noinit

Memory (layout) experiments with TSIM
-------------------------------------

* with -nosram option, TSIM boots with 16M of SDRAM starting at 0x40000000,
  an application can thus allocate 15M of contiguous memory using malloc
  (maybe more, didn't check exactly how much the RTEMS takes)

* the .text section in ELF can be really moved with -Ttext option passed to
  the compiler ; TSIM then really starts the application at this address as
  it finds it in the ELF binary ; going to 0x40800000 (leaving 8M at the
  bottom) works fine

* it really looks like that when .text is set, all the rest is placed above
  by the linker script, which means we can use the space below it .text (?)
  a simple test confirms that we can both read and write this area without
  immediately obvious disaster

* the evaluation version of TSIM would only simulate 2^32 ticks, which is
  not enough to run simple tests... like a memory allocation test I tried
  that just writes and then reads 7M ; the simulated machine is at 50MHz, so
  that the simulated time we have is about 86 seconds

* with TSIM, without disabling SRAM, SDRAM did not work as expected ;
  moving text to 0x60000000 did not work
  -> this is because relocating text section doesn't relocate stack pointer
  as needed

  parameter  -stack 0x60fffff0 to TSIM works

* SDRAM can however be accessed directly without problem when running from
  SRAM (still, this does not save us, at least not on the simulator,
  because we cannot fit into those 4M SRAM with anything)

* most memory (non-contiguous) we can get with TSIM-eval: use SRAM (4M),
  move code up in SDRAM to free n-megs of space for image, i.e.
 8M image at 0x60000000

  gcc-sparc.. -Ttext=0x60800000  -o atestx.exe atestx.c

  tsim ./bin/run -stack 0x60fffff0 atestx.exe

  this program can safely access 4M of SRAM and 8M freed in SDRAM

Debugging with TSIM
-------------------

* from TSIM manual, tested
* GDB can connect to TSIM over socket

(1) 
-> /opt/tsim-eval/tsim/linux/tsim-leon3 -gdb
...
gdb interface: using port 1234

(2) 
build application with -ggdb

-> /opt/rtems-4.8/bin/sparc-rtems4.8-gdb t

-> target extended-remote localhost:1234
...
0x00000000 in ?? ()

-> load
Loading section .text, size 0x193c0 lma 0x40000000
Loading section .data, size 0xe00 lma 0x400193c0
Loading section .jcr, size 0x4 lma 0x4001a1c0
Start address 0x40000000, load size 106948
Transfer rate: 1582 KB/sec, 270 bytes/write.

-> common gdb commands ( "break Init", "run", "cont" )

it seems that one has to restart the simulator to restart the debugged
application

(3)
install sources of development tools, which include the C library
(from RTEMS ftp, source RPMS, they get installed into
/usr/src/redhat/SOURCES, there unpack and apply patch; in case of newlib, a
symlink is needed from gcc tree)

gdb is confused where to look for the sources ; "directory" and
"substitute-path" commands should work, but as the references are relative,
I did not find a nice way to hack it (except creating a symlink in the
filesystem, for me it was in the root)

 
IO
--

- select call works only on sockets (part of networking)
- POSIX asynchronous IO (aio.h) is not supported
- it should be possible to use ioctl & FIONREAD 
  (ovm seems to support this - see availableForRead
  this code is part of TERMIOS serial line support
- non-blocking stdin (which is serial line) works with tcsetattr calls -
  termios (see termios example, raw mode)

backtracking "read" call
------------------------
 (with a debugger)

 read from standard input (fd 0)

 - ./cpukit/libcsupport/src/read.c : read
  - iop->handlers->read_h 
     (rtems_filesystem_read_t) 0x4000f0ec <device_read>
   - ./cpukit/libfs/src/imfs/deviceio.c : device_read
     jnode->name is "console", major is 0, minor is 0
     - ./cpukit/sapi/src/ioread.c : rtems_io_read
        _IO_Driver_address_table[major].read_entry
        (rtems_device_driver_entry) 0x40001578 <console_read>
       - ./c/src/lib/libbsp/sparc/leon3/console/console.c: console_read

NOTE:
/*
 *  Should we use a polled or interrupt drived console?
 *  
 *  NOTE: This is defined in the custom/leon.cfg file.
 *
 */
	  -  ./cpukit/libcsupport/src/termios.c:rtems_termios_read      
           rtems_termios_linesw[tty->t_line].l_read is NULL
	   tty->device.pollRead is not NULL (we have polling console)
      	   (int (*)(int)) 0x40001888 <console_inbyte_nonblocking>
           - fillBufferPoll (still termios.c)
             

    [ and, with this code path, the file descriptor flags are really
      ignored, so it is no suprise that O_NONBLOCK fcntl call has no effect
    ]

   config was:
	#define CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER  
	#define CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER
	#define CONFIGURE_RTEMS_INIT_TASKS_TABLE
	#define CONFIGURE_MAXIMUM_TASKS 1

   code was:
	printf("----PROGRAM-STARTS-HERE----\n");
  
  	int c;
	int r = read(0, &c, 1);
  	fprintf(stderr,"Read %d\n",r);
  	exit( 0 );

   and the read actually did not work.. (the Leon3 UART device registers
   seem not to work for input, it's probably the evaluation version of TSIM

backtracking "write" call
-------------------------
    write to standard output (fd 1)

    write
     -> ./cpukit/libcsupport/src/write.c : write
      -> ./cpukit/libfs/src/imfs/deviceio.c : device_write
       -> ./cpukit/sapi/src/iowrite.c : rtems_io_write
        -> ./c/src/lib/libbsp/sparc/leon3/console/console.c : console_write
         -> ./cpukit/libcsupport/src/termios.c : rtems_termios_write
          [ again, the fd flags are not used ]

    
	  by default, the OPOST flag was set
	  termios.c_oflag & OPOST
	  -> ./cpukit/libcsupport/src/termios.c : oproc
          handles CR/LF conversions, TAB interpretation, BACKSPACE,
	  conversion to uppercase 
           -> ./cpukit/libcsupport/src/termios.c : rtems_termios_puts
	   POLLING is used by default - TERMIOS_POLLED
            -> ./c/src/lib/libbsp/sparc/leon3/console/console.c : console_write_support
             -> ./c/src/lib/libbsp/sparc/leon3/console/debugputs.c :
			console_outbyte_polled
			(sends byte by polling the UART registers, active
			waiting here)


backtracking fcntl call
-----------------------

	fcntl
	->./cpukit/libcsupport/src/fcntl.c : fcntl
	 -> ./cpukit/libcsupport/src/libio.c : rtems_libio_fcntl_flags 
	  -> ./cpukit/libcsupport/src/assoclocalbyremote.c : rtems_assoc_local_by_remote  
           -> ./cpukit/libcsupport/src/assocptrbyremote.c:
          ...
        the flags make it to iop structure, iop->flags field
        
Timer issue
-----------

 - timer seems not to work
 - as a result, blocking input does not work, either
 - how to see the problem: rtems_task_wake_after (1)  does not return

 ticks are advanced by timer, installed from clock driver
 Install_clock in ./c/src/lib/libbsp/shared/clockdrv_shell.c
  $1 = (rtems_isr_entry) 0x40001484 <Clock_isr>

  Clock_driver_support_find_timer();
   -> amba_find_apbslv in ambapp.c
   
  Clock_driver_support_install_isr

  program that shows this:

#include <bsp.h>
#include <stdlib.h>
#include <stdio.h>

rtems_task Init(
  rtems_task_argument ignored
)
{
  printf("About to wait 1 tick...\n");
  rtems_task_wake_after (1)  ;
  printf("Woken up.\n");
  exit( 0 );
}

#define CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER
#define CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER
#define CONFIGURE_RTEMS_INIT_TASKS_TABLE
#define CONFIGURE_MAXIMUM_TASKS 1
#define CONFIGURE_INIT
#include <rtems/confdefs.h>


Running HW
----------

- 
	-model=TriPizloConservative-FakeScopesWithAreaOf-Bg_Mf_S 
	-io=SIGIOSockets_PollingOther 

   4M of heap is not enough !? (on sharpay..)
     it's probably also the reason why it is failing on leon3

      setting -gc-threshold does not seem to help... weird
      the machine does not even boot the user domain

 -
	MostlyCopying-B_M_F_H  doesn't work, either

MostlyCopyingWB-B_Mf_F_H


Compiling x86 RTEMS
-------------------

- make it use serial line as console, so that it can be run from command
  line automatically

- ../rtems-4.8.1/configure USE_COM1_AS_CONSOLE=1 BSP_PRESS_KEY_FOR_RESET=0
  --target=i386-rtems4.8 --enabrtemsbsp=pc586 --enable-tests=samples
  --enable-networking > configure.out 2>&1

  - not supported by 386, which always requires a key to be pressed
     ./c/src/lib/libbsp/i386/pc386/startup/exit.c
     - I've modified the file to support it
     (see ./c/src/lib/libbsp/powerpc/gen5200/startup/bspclean.c, which
       already supports it)

  - hmm, but it does not help, since RTEMS reboots the machine instead of
    shutting it down... so it is actually better to leave this option there
    and kill the machine when it appears in the output

../rtems-4.8.1/configure USE_COM1_AS_CONSOLE=1 BSP_PRESS_KEY_FOR_RESET=1
--target=i386-rtems4.8 --enable-rtemsbsp=pc586 --enable-tests=samples
--enable-networking > configure.out 2>&1

   - doesn't work, either - the text doesn not appear in serial console
     output
- so let's rely on a string being at the end of the programme

Booting in VMWare 
-----------------

- create a bootable ISO image with GRUB
 - download grub 0.97 (not the new GRUB2), configure, make
 - follow instructions from
 	http://www.gnu.org/software/grub/manual/html_node/Making-a-GRUB-bootable-CD_002dROM.html#Making-a-GRUB-bootable-CD_002dROM

   mkdir -p iso/boot/grub
   cp ./grub-0.97/stage2/stage2_eltorito iso/boot/grub/

   # copy the .exe files (RTEMS binaries that should be bootable)
   cp /home/kalibera/img/* iso

   mkisofs -R -b boot/grub/stage2_eltorito -no-emul-boot-boot-load-size 4
	-boot-info-table -o grub.iso iso

 - boot the CD
 - in GRUB
	kernel (cd)/name_of_the_file.exe
 	boot

 - can create GRUB that uses serial console

Booting in Bochs
----------------
 - can use the image as before
 - configure Bochs
 - use "term" display
 - and many other options...
 - serial port output can be redirected to a file
 - how to handle serial port input ? 
 - I don't know how to make bochs shutdown when rtems shutdowns - rtems just
 does reboot; so, I wrote a script which waits for a particular output and
 then kills bochs


Debugging in Bochs
------------------
 - there is an internal debugger (must be compiled in) or external gdb stub
 - only one of these supports can be compiled into a single binary
 - I wasn't able to make the gdb stub work
 - I wasn't able to compile in the internal debugger support (the
 compilation fails on my machine - maybe too new GCC, or it just doesn't
 work)


More on Bochs experience
------------------------
 - OVM seems to be crashing more in Bochs than in VMWare ; it's hard to
guess if it's OVM bug or Bochs bug or Bochs being stricter to bad code


QEMU
----
 - the pre-compiled qemu version does not seem to work (hangs)
 - the sources 0.9.1 need gcc 3.x to compile, which is by default not on FC9 
    (install compat-gcc34)
 - qemu sometimes works - sometimes it does not start the machine, but
   sometime it does

/opt/qemu-0.9.1_386/bin/qemu -cdrom ~/x86runner/grub.iso  -boot d -nographic
	-m 256 -no-kqemu -M pc -no-reboot

  - compilation options
   ./configure --cc=gcc34 --prefix=/opt/qemu-0.9.1_386/ --disable-linux-user
    --disable-darwin-user --target-list=i386-softmmu --disable-sdl
--disable-gfx-check > configure.out 2>&1

  - remote debugging
    should work with the "-s" option at the beginning of the list of options
    above

    however, does not work, in RTEMS, the execution stops on "Problem #2 in
    offset computation in Calibrate_loop_1ms"
    (this was with RTEMS without enabled debugging)
    
    - someone says that recompiling host kernel helps... weird
	http://article.gmane.org/gmane.comp.emulators.qemu/17806

  - strange, on sharpay, the -s option (waiting on gdb) seems to be ignored
      -- we need to use -S as well

  - but maybe gdb connection is still possible ?

  - compiling RTEMS with dbg support does not prevent it from running the
    default trap handler, so that the faulty thread's stack cannot be
    readily examined

  - running OVM in debugger is either too slow, or doesn't work at all

On RTEMs timers
---------------
 - setitimer doesn't exist
 - alarm does not interrupt threads (?) 
   http://www.rtems.com/ml/rtems-users/2004/september/msg00227.html

 - is there any preemption in RTEMS at all ?

 - with the tasks example ( rtems_task_wake_after )
    - if all threads are blocked in rtems_task_wake_after, the waking up
   works as intended
    - if one of the threads is in infinite loop,it is not preempted when the
   timer times out
       ( nomatter if the looping task has higher or lower priority than the
	sleeping tasks)
    - with timeslicing on, the other threads still do wake up, nomatter what
	priority they have (!)

       - timeslicing is turned on in rtems_task_create, oring the modes
         with RTEMS_TIMESLICE (it is sufficient to set this for the oring
         thread)
       by default, timeslicing is off, preemption is on and asynchronous
       signal processing is on, which means (*) that signals are delivered
       _when the task is scheduled_ ;

	- for task modes see ./cpukit/rtems/include/rtems/rtems/modes.h 
	
	- the mode of init task can probably be also set by
	#define CONFIGURE_INIT_TASK_INITIAL_MODES


 - nanosleep for 0 sec 0 ns is yield
 - nanosleep 

 - however, with my nsleep test, nanosleep timer does not need timeslicing
   when the timer thread has higher priority ; I don't completely understand
   why... but it works  (in this program, rtems_task_wake_after needs it)

   - the init task by default is not preemptive, so this must be updated

   - see instructive example to play with below (nsleep.c)
(*) http://www.infres.enst.fr/~domas/astre/task.html

On RTEMS signals & EINTR
------------------------

  - they have their own api (signal handlers are called ASR), see one of the
    examples (see nsleep_sig.c below)

  - receiving a signal does not interrupt a blocked read call from a console
    (termios) - it's seen from the sources & was verified

  - what should be interruptible (not tested, just from the sources):
	- sigtimedwait
	- nanosleep - testing... strange - doesn't work - the test suggests
		  that ASR signals are received only after the task is
	  	  scheduled to run (no EINTR)
	- sigsuspend
	- probably by read on socket, it's used in http daemon, but I don't
	see it in the sources of the socket layer

	( _POSIX_signals_Unblock_thread internally )

  - a posix example to play with might be ./testsuites/psxtests/psx02/init.c

  - Oh sh..., it seems that ASRs are implemented differently from signals;
    pthread_kill seems to support the EINTR on signal delivery, ASR does not
    (looking at the sources)

  - BTW, there are no pipes on RTEMS
  - there is a select call
    (and no pselect call)
  - there is no I_SETSIG, SIGIO mechanism

So what io/envent configurations we have available in OVM ?

 - IOSignalManagerViaSigIO
	native callss enableIOSignalManager
        - the SIGIO/SIGPOLL signal sent when IO operation can be called
	without blocking - no chance for RTEMS

 - IOSignalManagerViaPolling
	like with SIGIO, but (probably) polls all file descriptors on timer
	events (?each, ?some)
        - obviously depends on nonblocking IO

 - baseioservice "system level I/O support with SIGIO and polling"
 - selectsockets_pollingother
   select for events, select for sockets, polling for files & unknown
 - sigiosockets_pollingother
 - sigiosockets_pollingother_spinningevman
   like previous, but "signal event from thread is simple", which means that
   timer events do not send a signal .. but how are events recevied ?
 - 

Filesystem
----------

 - RTEMS supports FAT (seems to even support FAT32)
 - the fileio example however uses ATA devices, no ramdisk, so it cannot run
   on TSIM
 - by default, there is R/W IMFS filesystem that can be used by regular
	POSIX calls, just one has to define

#define CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM
// or an appropriate number here
#define CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS 64


 - the OVM built-in TestIO.java test assumes there is OVMMakefile... file in
   the current dirrectory
 
 - the TestFileIO.java assumes there is "/tmp" directory

 - the http example in network-demos shows how to get files to the target
   device ;; it basically compiles them into the binary

    * it creates a tar file with the files "FilesystemImage"
    * it converts into into C source using rtems-bin2c ("FilesystemImage.c")
    * compiles, links
    * at runtime, it untars the files using "Untar_FromMemory"


 - a sample test
	create rootfs and its content
	cd rootfs
	tar cf ../FilesystemImage .
	cd ..
	/root/rtems/386/tools/build/rtems-bin2c FilesystemImage FilesystemImage 
	  creates FilesystemImage.h and FilesystemImage.c
	  the .h file contains
	    extern const unsigned char FilesystemImage[];
            extern const size_t FilesystemImage_size;

	  the .c file contains these symbols

	in the example file, 
		#include "FilesystemImage.h"
		#include <rtems/untar.h>

		 rtems_status_code status;
  
		  status = Untar_FromMemory( (char *)FilesystemImage, FilesystemImage_size);
  
  		  if (status) {
    			printf("Unpacking of the file system image has failed with code %d\n",
      			status);
		  } 
	(it works!)
  - but compiling the C file, when it is large, is terribly slow ; when it's
40M, we run out of memory
  - the assembly version (img2asm) is faster - assembler is faster

  - but, what about simply using objcopy ?
  objcopy -I binary -O elf32-i386 -B i386 FilesystemImage FilesystemImage.o

  - this creates
00000000 l    d  .data  00000000 .data
00000000 g       .data  00000000 _binary_FilesystemImage_start
00002800 g       .data  00000000 _binary_FilesystemImage_end
00002800 g       *ABS*  00000000 _binary_FilesystemImage_size

  - the _binary_HWText_size does not work, or I don't know how to use it

  - for embedded HWText, this works:
	void * embedded_start = &_binary_HWText_start;
	void * embedded_end = &_binary_HWText_end;
	size_t embedded_size = ((char *)embedded_end) - ((char *)embedded_start) + 1;

  - and it works for filesystem image, too
  - for LEON3/SPARC:
	/opt/rtems-4.8/bin/sparc-rtems4.8-objcopy -I binary -O elf32-sparc 
		-B sparc FilesystemImage FilesystemImage.o

  - WARNING !!!
  -  the IMFS only supports file names (a single node) of 32 bytes
  -  the limit is in imfs.h - has to be changed manually in the sources
  -  some of the input files used by SPEC have longer names

SPEC JVM 98 at x86
------------------

  - check ok
  - compress ok
  - db ok
  - javac ok (? why is there so few numbers)
  - jack no (missing input files,  spec/benchmarks/_228_jack/Jack.jack,
	validity -  spec/benchmarks/_228_jack/validity100.dat)
     - it's the RTEMS limit on number of open files
     - 16 is not enough 

nsleep.c
--------


#include <bsp.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>

void task_info(char *msg) {

  printf("Thread %s:\n", msg);
  rtems_task_priority old_pri;
  if (rtems_task_set_priority(0, 0, &old_pri) != RTEMS_SUCCESSFUL) {
    perror("rtems_task_set_priority:");
  }
  printf("Priority: %d\n", old_pri);
  
  rtems_mode old_mode;
  if (rtems_task_mode(0, 0, &old_mode) != RTEMS_SUCCESSFUL) {
    perror("rtems_task_set_mode:");
  }
  printf("Mode: %d\n", old_mode);
}

static inline uint32_t   get_ticks_per_second( void )
{
  rtems_interval ticks_per_second;
  (void) rtems_clock_get( RTEMS_CLOCK_GET_TICKS_PER_SECOND, &ticks_per_second );  return ticks_per_second;
}


volatile unsigned trigger = 0;

unsigned long period = 5 * 1000000000UL; // 5 seconds

rtems_task timerTask( rtems_task_argument unused ) {
  struct timespec req;
  
 
  unsigned ticks = (period *get_ticks_per_second()) * 1000000000UL;
  
  task_info("timer");
  for (;;) {

#if 1
    req.tv_sec=period/1000000000UL;
    req.tv_nsec=period%1000000000UL;
    if (nanosleep(&req,NULL)!=0) {
      perror("Nanosleep failure\n");
    }
#else    
     if (rtems_task_wake_after( ticks ) != RTEMS_SUCCESSFUL) {	
       perror("rtems_wake_after failure\n");
     }
#endif
    
    trigger++;    
  }
}

void main_task_body(void) {

  unsigned c=0; 
  unsigned last = trigger;

  task_info("main body");  
  for(;c<10000000L;c++) {

    if (last!=trigger) {
//      printf("Trigger is %u\n", trigger);
      last = trigger;
    }

  } 
  printf("After end, trigger is %u\n", trigger);   
}




rtems_task mainTask( rtems_task_argument unused ) {
  main_task_body();
}



rtems_task Init(
  rtems_task_argument ignored
)
{

  task_info("main after start");
  rtems_status_code status;

  rtems_task_priority old_pri;
  status = rtems_task_set_priority( RTEMS_SELF, 2, &old_pri);
  printf("rtems_task_set_priority: %d errno %d old:%d\n", status, errno, old_pri);

  rtems_mode old_mode;
  status = rtems_task_mode( RTEMS_PREEMPT, RTEMS_PREEMPT_MASK, &old_mode);
  printf("rtems_task_set_mode: %d errno %d old:%d\n", status, errno, old_mode);  
  
  task_info("main after update");

  rtems_id timerTaskId;
  rtems_name timerTaskName;
  
  rtems_id mainTaskId;
  rtems_name mainTaskName;
  

  timerTaskName = rtems_build_name( 'T', 'I', 'M', 'E');
  
  status = rtems_task_create( timerTaskName, 1, RTEMS_MINIMUM_STACK_SIZE * 2, 
    RTEMS_DEFAULT_MODES, RTEMS_DEFAULT_ATTRIBUTES, &timerTaskId );
   printf("rtems_task_create: %d errno: %d\n", status, errno);


  status = rtems_task_start( timerTaskId, timerTask, 0 );
  printf("rtems_task_start: %d errno %d\n", status, errno);

  /*
  mainTaskName = rtems_build_name( 'M', 'A', 'I', 'N');
  
  
  status = rtems_task_create( mainTaskName,2, RTEMS_MINIMUM_STACK_SIZE * 2, 
    RTEMS_DEFAULT_MODES , RTEMS_DEFAULT_ATTRIBUTES, &mainTaskId );
   printf("rtems_task_create: %d errno: %d\n", status, errno);


  status = rtems_task_start( mainTaskId, mainTask, 0 );
  printf("rtems_task_start: %d errno %d\n", status, errno);  

  status = rtems_task_delete( RTEMS_SELF );
  */


  main_task_body();
   exit( 0 );
}
#define CONFIGURE_INIT
#define CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER
#define CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER
#define CONFIGURE_RTEMS_INIT_TASKS_TABLE
#define CONFIGURE_MAXIMUM_TASKS 3
#define CONFIGURE_EXTRA_TASK_STACKS         (2 * RTEMS_MINIMUM_STACK_SIZE)

#include <rtems/confdefs.h>

nsleep_sig.c
------------


#include <bsp.h>
//#include <rtems.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>

rtems_id mainTaskId;

void task_info(char *msg) {

  printf("Thread %s:\n", msg);
  rtems_task_priority old_pri;
  if (rtems_task_set_priority(0, 0, &old_pri) != RTEMS_SUCCESSFUL) {
    perror("rtems_task_set_priority:");
  }
  printf("Priority: %d\n", old_pri);
  
  rtems_mode old_mode;
  if (rtems_task_mode(0, 0, &old_mode) != RTEMS_SUCCESSFUL) {
    perror("rtems_task_set_mode:");
  }
  printf("Mode: %d\n", old_mode);
}

static inline uint32_t   get_ticks_per_second( void )
{
  rtems_interval ticks_per_second;
  (void) rtems_clock_get( RTEMS_CLOCK_GET_TICKS_PER_SECOND, &ticks_per_second );  return ticks_per_second;
}


volatile unsigned trigger = 0;

unsigned long period = 5 * 1000000000UL; // 5 seconds

rtems_asr Process_asr(
  rtems_signal_set signal_set
)
{
  trigger++;      
}


rtems_task timerTask( rtems_task_argument unused ) {
  struct timespec req;
  rtems_status_code status;
 
  unsigned ticks = (period *get_ticks_per_second()) * 1000000000UL;
  
  task_info("timer");
  for (;;) {

#if 1
    req.tv_sec=period/1000000000UL;
    req.tv_nsec=period%1000000000UL;
    if (nanosleep(&req,NULL)!=0) {
      perror("Nanosleep failure\n");
    }
#else    
     if (rtems_task_wake_after( ticks ) != RTEMS_SUCCESSFUL) {	
       perror("rtems_wake_after failure\n");
     }
#endif
    
//    trigger++;    
    if ((status = rtems_signal_send( mainTaskId, RTEMS_SIGNAL_16 )) != RTEMS_SUCCESSFUL ) {
      printf("rtems_signal_send: %d errno=%d\n", status, errno);
    };    
  }
}

void main_task_body(void) {

  unsigned c=0; 
  unsigned last = trigger;

  task_info("main body");  
  
#if 0  
  for(;c<10000000L;c++) {

    if (last!=trigger) {
//      printf("Trigger is %u\n", trigger);
      last = trigger;
    }

  } 
#else
  for(;;) {
    int c = getchar();
    if (c==EOF) {
      if (errno==EINTR) {
        printf("getchar interrupted.\n");
      } else {
        perror("getchar:");
      }
    } else {
      printf("You pressed a key? (%d - %c)\n",c,c);
    }
    printf("BTW, trigger is %u\n", trigger);     
  }

#endif  
  printf("After end, trigger is %u\n", trigger);   
}



rtems_task mainTask( rtems_task_argument unused ) {
  main_task_body();
}


rtems_task Init(
  rtems_task_argument ignored
)
{
  rtems_status_code status;
  
  status = rtems_task_ident( RTEMS_SELF, 0, &mainTaskId);
  printf("rtems_task_ident: %d errno %d mainTaskId %d\n", status, errno, mainTaskId);
  
  task_info("main after start");


  status = rtems_signal_catch( Process_asr, RTEMS_NO_ASR | RTEMS_NO_PREEMPT );
//  status = rtems_signal_catch( Process_asr, RTEMS_ASR | RTEMS_PREEMPT );
  printf("rtems_signal_catch: %d errno %d\n", status, errno);

  rtems_task_priority old_pri;
  status = rtems_task_set_priority( RTEMS_SELF, 2, &old_pri);
  printf("rtems_task_set_priority: %d errno %d old:%d\n", status, errno, old_pri);

  rtems_mode old_mode;
  status = rtems_task_mode( RTEMS_ASR|RTEMS_PREEMPT, RTEMS_ASR_MASK|RTEMS_PREEMPT_MASK, &old_mode);
  printf("rtems_task_set_mode: %d errno %d old:%d\n", status, errno, old_mode);  
  
  task_info("main after update");

  rtems_id timerTaskId;
  rtems_name timerTaskName;
  

  

  timerTaskName = rtems_build_name( 'T', 'I', 'M', 'E');
  
  status = rtems_task_create( timerTaskName, 1, RTEMS_MINIMUM_STACK_SIZE * 2, 
    RTEMS_DEFAULT_MODES, RTEMS_DEFAULT_ATTRIBUTES, &timerTaskId );
   printf("rtems_task_create: %d errno: %d\n", status, errno);


  status = rtems_task_start( timerTaskId, timerTask, 0 );
  printf("rtems_task_start: %d errno %d\n", status, errno);

  main_task_body();
   exit( 0 );
}
#define CONFIGURE_INIT
#define CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER
#define CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER
#define CONFIGURE_RTEMS_INIT_TASKS_TABLE
#define CONFIGURE_MAXIMUM_TASKS 3
#define CONFIGURE_EXTRA_TASK_STACKS         (2 * RTEMS_MINIMUM_STACK_SIZE)

#include <rtems/confdefs.h>

