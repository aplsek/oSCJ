oSCJ installation Manual
--------------------------------------
Date: 04/06/2010
Author: Ales Plsek
Version : 1.0

Web: www.ovmj.net/oscj
Project Code-Base: http://code.google.com/p/scj-jsr302/



Outline:
--------------
	1. SCJ versions
	2. Project status
	3. Installing oSCJ
		- obtaining, installing and running oSCJ
	4. Source-Code structure
	5. Running arbitrary applications on top of oSCJ
	6. Eclipse support




1)    SCJ versions:
------------------------------------------------
We have three different versions of SCJ:
1) SCJ running on top of RTSJ (we do not use this one anymore, it was only in the early beginnings of the project )
2) SCJ running on top of FijiVM
3) SCJ running on top of OVM

Because Fiji is not publically available yet, we provide the instructions how to install SCJ-OVM. 




2)   PROJECT STATUS:
------------------------------------------------
All three version are now runnable, you can test them using either the SCJ HelloWorld example or the miniCDx benchmark.
- installation, compilation and running is done through the Makefile



3)  INSTALLATION:
------------------------------------------------
Installation itself is not difficult, untar the distribution and type "make". 


3.0 Requirements
-----------------

OVM
-----
Java 1.5 
- OVM needs Java 5 distribution to compile, install Java 5 and modify your PATH to point to your JAVA5

Add to the PATH, for example:
export PATH=opt/jdk1.5.0_22/bin:$PATH



3.2 oSCJ offical Mercurial Repo
--------------------------------------

Check out this Mercurial repository:

hg clone https://scj-jsr302.googlecode.com/hg/ scj-jsr302  

- this is 



3.2. Downloading an official release
-------------------------

1. Download and untar.
$ tar -zxvf oscjtar.gz




3.3) Checkout development version: SCJ-OVM   [only for oSCJ developers!!!]
----------
You must have an account on ZED.
Here are the instructions step by step:

1) choose an installation directory, e.g. "scj-ovm/" and cd "scj-ovm/"

2) checkout the following:
$ svn checkout svn+ssh://plsek@zed.cs.purdue.edu/exports/u119/sss/common/svn/ovm/branches/SCJ/OpenVM
$ svn checkout svn+ssh://plsek@zed.cs.purdue.edu/exports/u119/sss/common/svn/scj-project/scj
- just replace my login with yours...

3) Makefile
1) $ copy a "Makefile" from /scj/examples/ovm to "scj-ovm/"
2) modify OVM_HOME and OVM_BUILD variables to have absolute paths to the /scj

4) Java installation
- OVM needs Java5
- before running make, do
$ export PATH=JAVA5_dir/bin:$(PATH)

5) make
- this will compile SCJ, OVM, and helloworld example

6) Helloworld
- helloworld example is placed in scj/examples/helloworld
- type "make run" to run it.



3.3)  DISTRIBUTION DIRECTORY structure
-------------------------------------

#  oSCJ/  
#    * OpenVM/ -- contains distribution of our SCJ-compliant VM
#    * build/ -- the SCJ-OVM configured for will be installed into this directory
#          o x86/ -- oSCJ compiled for x86
#          o leon3/ -- oSCJ compiled for leon3 
#    * doc/ -- documentation directory
#    * examples/ -- examples of SCJ applications
#          o HelloWorld/ -- hello world application
#				o leon3/ -- compiled hello world application for leon3
#				o build/ -- compiled hello world application for x86
#          o minicdj -- the miniCDj benchmark distribution 
#				o leon3/ -- compiled cdx for leon3
#				o build/ -- compiled cdx for x86
#    * scj/
#          o ri/ -- SCJ library implementation
#          o ri_rtsj/ -- SCJ library implementation based on RTSJ 
#    * tools/
#          o checker/ -- Static Checker distribution
#          o tck/ TCK for SCJ 
#    * readme
#    * LGPL-License.txt 


3.4 OVM and Makefile process
-----------------------------------

3.4.1 info
----------------

SCJ code is copied into OVM dir in: 
/ovm/src/syslib/user/ovm_scj
- the content of this directory is completely updated by the code from scj/ri.

The other SCJ related code is in dirs:
/ovm/src/syslib/user/ovm_classpath 
and
/ovm/src/syslib/user/ovm_platform
- these classes are part of OVM and are not distributed inside SCJ. They were however modified at some places to be compliant with SCJ.

NOTE:
SCJ code is in Java6, however, OVM is able to compile only Java4 code (and to do this, it is dependent on Java5, very tricky!)

Makefile process:
1. SCJ code transformed from J6 - > J4
2. SCJ J4 code copied to /ovm/src/syslib/user/ovm_scj
3. OVM compiled

4. Helloworld is compiled with OVM.
5. helloworld run.



3.4.2  Execute sequence for x86
-----------------------------
	0. make prepare_scj  - will move SCJ lib into the OVM
	1. make  - OVM, SCJ and Helloworld SCJ are compiled and finally HelloWorld is executed
	2. make cdx - cdx benchmark is executed
	
3.4.3  Execute sequence for LEON3 !!!!!
-----------------------------
	0. make prepare_scj
	1. make board    - compiles helloworld for board
	2. make board_cdx - compiles cdx for board	



3.5)  SCJ-Fiji
--------------------
The installation procedure for FijiVM is similar, you will just use Makefile from "/examples/fiji" and there is no restriction on Java version.






4.) SOURCE_CODE STRUCTURE:
------------------------------------------------
The SCJ source codes are placed in scj/ri.
For your better orientation, the source code is divided into several categories:


4.1)
ri/spec - contains the core SCJ sources classes defined by the JSR-302 Spec
ri/s3 - contains our SCJ classes needed for our specific implementation of SCJ

4.2) Fiji vs. OVM distinction
Furthermore, in subdirectories there are some duplicated classes because their implementation differers depending on VM.
fiji - classes specific to fiji
ovm - classes specific to ovm
common - the majority of classes is independent from VM, so they are placed here.
- in scj/ and ovm/ projects are also configuration files for eclipse projects, so you can conveniently open them in Eclipse and you will clearly see the structure I am describing here. 


4.3) RTSJ-SCJ
The RTSJ based version is in scj/ri_rtsj/







5.) Running your arbitrary application with oSCJ 
----------------------------------------------------------

make app APP=/path/to/your/application/root/directory APP_MAIN="main_class_name_with_package_name"




6.) ECLIPSE support
------------------------------

The oSCJ distribution includes several development projects, we distribute also .eclipse files so they can be imported into the Eclipse IDE.

The Eclipse-compliant projects are
	- OpenVM/
	- scj/
	- examples/miniCDj
	- tools/
		- TCK/
		- checker/
		
In Eclipse, go to "Import Project", browse into one of these directories and import it.




